<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator><link href="https://oguzkonya.com/feed.xml" rel="self" type="application/atom+xml" /><link href="https://oguzkonya.com/" rel="alternate" type="text/html" /><updated>2022-03-27T18:58:05+00:00</updated><id>https://oguzkonya.com/feed.xml</id><title type="html">oguzkonya</title><subtitle>Game Developer</subtitle><author><name>Oguz Konya</name></author><entry><title type="html">Yurt Dışına Yerleşmek: Bir İrlanda Macerası</title><link href="https://oguzkonya.com/yurt-disina-yerlesmek-bir-irlanda-macerasi/" rel="alternate" type="text/html" title="Yurt Dışına Yerleşmek: Bir İrlanda Macerası" /><published>2020-11-11T00:00:00+00:00</published><updated>2020-11-11T00:00:00+00:00</updated><id>https://oguzkonya.com/yurt-disina-yerlesmek-bir-irlanda-macerasi</id><content type="html" xml:base="https://oguzkonya.com/yurt-disina-yerlesmek-bir-irlanda-macerasi/"><![CDATA[<p>Uzun zamandır yazmıyorum fakat son bir yıldır bir yandan işlerin yoğunluğu, bir yandan çoluk-çocuk, bir yandan COVID-19, bir yandan taşınma derken birşeyler yazmaya pek vakit bulamadım. Aslında “draft” klasörümde yarım kalmış 4 tane yazı var fakat Medium gibi sitelerde sıkça gördüğümüz 100-200 kelimelik yazılardan nefret ediyorum, yazım mümkün olduğunca kapsamlı olsun istiyorum. Böyle olunca da bir yazıya epey vakit ayırmam gerekiyor, çoğu zaman da bitiremeden aklım başka yerlere kayıyor.</p>

<p>Gelgelelim, bu yazıyı yarım da olsa yayınlayacağım ve mümkün olduğu kadar güncelleyeceğim. Çünkü hem bir nevi günlük görevi görsün istiyorum, hem de kendime başvuru kaynağı olsun. Bencil isteklerimin ötesinde gelecek planları yapan genç arkadaşlara yardımının dokunması gibi “philanthropist”<sup id="fnref:philanthropist" role="doc-noteref"><a href="#fn:philanthropist" class="footnote" rel="footnote">1</a></sup> bir amacım da var açıkcası, çünkü bu yazımda İrlanda’ya nasıl yerleştiğimden bahsedeceğim ve bu aralar pek çok gencin yurt dışına yerleşme arayışı içerisinde olduğunu biliyorum. Yalnız önden belirteyim, ben iş bulduktan sonra taşındım buraya. Dolayısıyla dil kursu, Ankara anlaşması vb. yollardan yerleşmek bu yazının konusu değil.</p>

<h2 id="i̇rlandada-i̇ş-bulmak">İrlanda’da İş Bulmak</h2>

<p>Yalan yok, ben aslında İrlanda’da iş bakmıyordum. Hatta yurt dışında iş bulabilmek için pek çaba sarfettiğim bile söylenemez. Önceki çalıştığım şirketin Londra ofisine geçmek için birkaç kez talepte bulundum aslında, ama İstanbul ofisinde daha faydalı olacağım belirtilip bu talebim reddedilince olabilecek en minimal eforla iş bakmaya başlamıştım. Fakat COVID’den dolayı ülkeler karantinaya girmeye başlayınca artık şansım kalmadı diye düşünüyordum ki, çok yanılıyormuşum! Sadece bir ay içerisinde 6 farklı ülkeden teklif geldi! Üstelik hiçbirine ben başvurmamıştım bile. Zannedersem evinde kalmaya başlayan insanların oyunlara sarması, firmaların da evden çalışmanın aslında sürdürülebilir bir sistem olduğunu farketmeleri ve ağlarını daha geniş atmaya başlamaları benim gibi yazılımcılar için müthiş bir fırsat olmuş olabilir.</p>

<p>Fakat elbette şans kapıyı kırdığında eğer don atletle yakalandıysanız kendinizi Mülayim Sert gibi “vakitsiz gelen paranın içine eder”<sup id="fnref:mulayim" role="doc-noteref"><a href="#fn:mulayim" class="footnote" rel="footnote">2</a></sup> bir durumda bulabilirsiniz. Dolayısıyla hazırlıklıydım. Linkedin profilimi eksiksiz doldurmuştum, zaten sık sık güncelliyordum. Sağdan soldan gelen bağlantı taleplerini şu kıstaslara göre kabul ediyordum:</p>

<ul>
  <li>Unvanı “head hunter”, “İK”, “işe alım uzmanı” veya benzerleri ise istisnasız kabul et.</li>
  <li>Aynı sektörde değilsek, 500’den az bağlantısı varsa, en az bir doğrudan tanıdığım bağlantımız yoksa reddet, aksi halde kabul et.</li>
  <li>Aynı sektörde isek, 100’den az bağlantısı varsa, en az bir doğrudan tanıdığım bağlantımız yoksa reddet, aksi halde kabul et.</li>
</ul>

<p>Şimdi böyle bakınca çok saçma kıstaslar gibi görünebilir fakat bu sayede ağım tam olarak istediğim gibi şekillendi: ya gerçekten tanıdıklarım, ya sektörde bilinen insanlar, ya da benim gibileri arayan insanlar. Evet, işe alım uzmanları bir yerden sonra çok rahatsız ediyorlar, doğru. Paylaşımları ortamı iyice Facebook’a çevirdi, doğru. Fakat şöyle de bir gerçek var ki işini gerçekten iyi yapanla kötü yapanı yalnızca bir bağlantı isteğinden ayırt etmek çok zor, ki iyi iş teklifinin kimden geleceği de pek belli olmuyor. Benim durumumda da böyle oldu. Doğrudan benimle iletişime geçen oyun firmalarının kendi işe alım uzmanlarındansa bana öylesine bir teklifte bulunan bir head hunter sayesinde buldum şu anki işimi. Aslında değerlendirdiğim, hatta teklif aşamasına geldiğim başka pozisyonlar vardı. O headhunter bana “DIGIT diye bir firmada şöyle bir pozisyon var, ilgilenir misin” diye sorduğunda, “hiç duymadığım bir firma, niye gideyim ki bunlara, konuşayım ego şişireyim biraz” diye düşünmüştüm. Fakat tam tersi bir durum oldu. Diğer firmalar teklif aşamasına ya bir türlü geçemediler, ya da teklifleri epey düşük kaldı. O sırada DIGIT’le yaptığım görüşmeler çok planlı bir şekilde son aşamaya geldi, o görüşmeler sırasında da yaptıkları mühendislikten çok etkilendim ve önceki düşüncelerimden de biraz utandım. Şu gün teklif yapacağız deyip gerçekten de tam olarak o gün teklif yapınca hanımla oturduk konuştuk. Diğer seçenekler benzer maaşlarla, İsveç, Almanya ve Fransa’ydı. Teklifin İngilizce konuşulan ve Avrupa Birliği üyesi olan bir ülkeden geldiğini ve diğerlerinden düşük bir pozisyona aynı maaşı verdiklerini de göz önünde bulundurarak (pozisyon yükseldiğinde maaşın diğerlerine göre daha yüksek olacağını düşünerek), DIGIT’in teklifini kabul etmeye karar verdik. Çalıştığım şirkete teşekkürlerimi sunarak 24 Nisan’da istifamı verdim ve 25 Haziran’da ayrılmak üzere anlaştık.</p>

<h2 id="i̇rlandada-i̇şe-başlamak">İrlanda’da İşe Başlamak</h2>

<p>Önceki başlıkla bunun arasında ne fark var diyebilirsiniz, fakat işi bulmakla işe başlamak gerçekten çok farklı tecrübeler, çünkü işi kabul ettikten sonra başlayabilmek için yapılacak tonla iş var.</p>

<h3 id="çalışma-i̇zni">Çalışma İzni</h3>

<p>İlk olarak sözleşme imzalıyorsunuz ve daha sonra Critical Skill Permit’e başvuruyorsunuz. Critical Skill Permit yetenekli bireylerin ülkeye getirilmesi için İrlanda devletinin çıkardığı bir çalışma izni türü. İrlanda bu izni bol kepçeden dağıtıyor çünkü en basit haliyle İrlanda’nın ekonomisi büyüyor ama ülkenin nüfusu bu büyümeyi karşılayacak kritik yeteneklere sahip kişileri barındırmıyor<sup id="fnref:population" role="doc-noteref"><a href="#fn:population" class="footnote" rel="footnote">3</a></sup>. Bu izni alabilmek için iddia ettiğiniz yeteneklere sahip olduğunuz ispatlamanız isteniyor. Kıstasları tam olarak bilmiyorum açıkcası, fakat bana söyledikleri şuydu: “elinde ne varsa gönder”. Ben de tüm diplomalarımı ve detaylı SGK dökümümü (yeminli tercümanın İngilizce’ye çevirdiği halini) gönderdim, 6 hafta sonra da iznim çıktı. Söylediklerine göre bu süreç aslında 12 haftayı bulabiliyormuş, COVID’den dolayı bazı işlemleri hızlandırmışlar. Ben ihbar süremi bu iznin çıkmasını bekleyerek değerlendirdim.</p>

<h3 id="pps">PPS</h3>

<p>Critical Skills Permit’i aldıktan sonra PPS (Personal Public Service) numarası almanız ve İrlanda’da bir banka hesabı açmanız gerekiyor. PPS numarası İrlanda’daki tüm yasal işlemleriniz için kullanacağınız kimlik numarası gibi birşey. Bizim kimlik numarasından farklı olarak vatandaş olmanıza gerek yok, vergi veriyor olmanız yeterli. Başvurusu da oldukça kolay, PPS numarası için başvuru formunu doldurup şirketinizden alacağınız orada çalıştığınızı gösteren bir belgeyle birlikte <a href="mailto:PPSN@welfare.ie">PPSN@welfare.ie</a> adresine gönderiyorsunuz ve PPS numaranız yaklaşık 3-4 hafta sonra adresinize geliyor.</p>

<h3 id="banka-hesabı">Banka Hesabı</h3>

<p>Çalışma izniniz ve PPS numaranız varsa artık çalışmaya başlayabilirsiniz, fakat maaşınızı alabilmek için banka hesabı açmalısınız. Avrupa Birliği vatandaşı olmadığımızdan dolayı bankalar bize kolay kolay hesap açmıyor, bunun için İrlanda’da bir adres istiyor. Eğer kısa süre içerisinde İrlanda’ya taşınacaksanız, geçici bir adresi de kabul ediyorlar ama 8 hafta içerisinde kalıcı adres beyanında bulunmanız lazım. Ben işe başladığımda henüz vizem bile olmadığından (COVID’den dolayı vize başvuru merkezi süresiz olarak kapalıydı) hesap açtıramadım ve Enpara hesabımı kullandım. İrlanda’ya yerleşene kadar şirketim maaşımı SWIFT’le gönderdi, her transferde yaklaşık €25’luk bir kesinti oldu ama aynı gün içinde de elime geçti. Bu kısım bizim için oldukça eğlenceli oldu, Euro kazanıp TL harcarken epey bir para biriktirmiş olduk.</p>

<h2 id="i̇rlandaya-taşınmak">İrlanda’ya Taşınmak</h2>

<p>İşte zurnanın zırt dediği yer. Ben normalde taşınmayı hiç sevmem, uluslararası taşınma stresi beni mahvetti. Hele bir de çocuk olunca düşünmeniz gereken çok şey oluyor. Ama herşeyden önce vize almak gerekli.</p>

<h3 id="vize">Vize</h3>

<p>Öncelikle hangi vizeye başvuracağınızı bilmeniz gerekiyor. İrlanda’da çalışan kişi olarak siz Long Stay - Multi Entry - Employment vizesine başvurmalısınız. Aileniz de sizinle gelecekse Long Stay - Multi Entry - Family Union vizesine başvurmalı. Biz aracı kurum kullanmadan başvurduğumuz için ben eşimin ve kızımın vizesini de çalışma vizesi olarak doldurmuştum. Neyse ki başvuru merkezinde düzelttiler, fakat aile vizesinde istenen dokümanlar eksikti. Koşa koşa çıktık, arabamıza atladık, İstanbul’un yarısını gezip evrakımızı tamamladık, İngilizce’ye tercüme ettirdik (eşimin işi dolayısıyla yeminli bir tercümanla çalışıyor olması ve aralarının iyi olması çok işimize yaradı) ve iki saat sonra başvuru merkezi kapanmadan geri döndük. Ücretimizi ödedik ve başvurumuzu tamamladık. Yaklaşık 1.5 ay sonra da vizelerimiz geldi. Tüm bu süreçte bizim başımızı yakan bazı noktaları paylaşmak istiyorum:</p>

<ul>
  <li>
    <p>Kendiniz için çıkardığınız evrakın aynılarından eş ve çocuk için de istiyorlar. Ailenizle taşınıyorsanız mutlaka banka hesap dökümü ve vize davetiyelerini aileniz için de çıkarttırın.</p>
  </li>
  <li>
    <p>Tüm dokümanların birer kopyasını bulundurun. Her başvurudan iki tane olsun. Hiç olmazsa fotoğrafını çekin, bir yerlere kaydedin, mutlaka lazım oluyor.</p>
  </li>
  <li>
    <p>Evliyseniz evlilik cüzdanınızın aslını da istiyorlar (fotokopisi yetmiyor). Bu bilgi hiçbir yerde yazmıyor.</p>
  </li>
  <li>
    <p>Çocuğunuz varsa çocuğunuzun sizle olan bağını ispatlamanız gerekiyor, bu da tam vukuatlı nüfus kayıt örneğiyle oluyor. Bu dokümanın hem Türkçesi hem İngilizcesi gerekiyor, mutlaka tercüme ettirin (ikinci maddede belirttiğim kopyasının sonradan lazım olacağı dokümanlardan biri bu, aklınızda bulunsun).</p>
  </li>
  <li>
    <p>Çocuğun tam vukuatlı nüfus kayıt örneği yalnızca E-Devlet’ten çıkartılabiliyor fakat 18 yaş altı çocuklara şifre almak için Nüfus Müdürlüğü’ne başvurmanız gerekiyor, internetten alamıyorsunuz.</p>
  </li>
  <li>
    <p>Vize ücreti tüm hizmet bedelleriyle birlikte kişi başı €131 tutuyor. Ben nakit ödedim, çünkü başvuru merkezinin sitesinde kredi kartı kabul edilmediği yazıyordu, fakat gittiğimde bazı kişilerin kredi kartıyla ödediklerini gördüm (yalnız bunlar başka ülkeler olabilirler, siz yine de yanınızda nakit bulundurun, hiç olmazsa İrlanda’ya gelince kullanırsınız).</p>
  </li>
  <li>
    <p>Daha önce başka ülkelerden vize almış olsanız da 6 aylıktan uzun vizelere başvurmayın. Her halükarda ilk vize 6 aylık çıkıyor. Ayrıca unutmayın, İrlanda Schengen’e dahil değil, Schengen’iniz varsa bile vize almalısınız ve alacağınız bu vizeyle Avrupa’yı dolaşamıyorsunuz.</p>
  </li>
</ul>

<h3 id="evi-boşaltmak-ve-nakliye">Evi Boşaltmak ve Nakliye</h3>

<p>İrlanda’ya taşınırken en çok stres olduğumuz konulardan biri de eşyaların nakliyesi oldu. Eşyalarımız bulacağımız eve sığar mı, elektrikli aletlerin fişleri prizlere uyar mı, bu kadar eşya gitse sonra geri gelmemiz gerekse nasıl gelir ve en önemlisi bunca eşyayı 4000km öteye göndermek bize kaça patlayacak gibi düşünceler epey uykumuzu kaçırdı. Hanımla oturduk konuştuk, eşyaların büyük kısmını elden çıkarmaya karar verdik. Zaten yurt dışı tekliflerini değerlendirmeye başlamadan önce ev bakıyorduk ve yeni evimize yeni eşyalarla geçmeyi planlıyorduk. Eski eşyaları taşımak için para verip bir de taşındığımızda yeni eşyalara para vermek istemedik. Beyaz eşyaları, salonun takımlarının tamamını, gardropları ve yatağımızı alması için bir spotçuyla anlaştık. Zaten İrlanda’da eşyasız olarak kiraya verilen evlerde bile beyaz eşyalar oluyor genelde. Eksikleri de biz tamamlarız dedik. Spotçu taşınma gününden bir gün önce geldi, eşyalarımızı oldukça cüzi bir fiyata aldı götürdü. Biz evde eşya kalmadı, artık kolay taşınırız diye düşünüyorduk ki ertesi günü uluslararası nakliyeciler geldiğinde evden irili ufaklı tam 84 koli çıktı! Neyse ki biz hiçbir şeye elimizi sürmedik<sup id="fnref:moving" role="doc-noteref"><a href="#fn:moving" class="footnote" rel="footnote">4</a></sup>. <a href="http://esenmoving.com.tr/">Esen Nakliyat</a>‘tan başlarında oldukça genç bir hanım olan 6 kişilik bir ekip geldi, tüm eşyalarımızı (kendi yaptığımız bir-iki koliyi bile!) kolilere koydu, kolileri defalarca kez bantlayıp numaralandırdı ve envantere işleyip kamyona taşıdı. Bütün işlemi 2 saatte bitirdiler. O zamana dek hep kendileriyle çalışmak istemiş (son 10 yılda 6 kez taşındık) fakat tarifelerinin pahalılığı nedeniyle çalışamamıştık. Taşınma masraflarının büyük bir kısmını şirketim karşıladı, bu vesileyle profesyonel bir ekip nasıl çalışıyormuş onu da görmüş olduk. Yalnız ufak bir not: eşyalar gemiyle nakliye ediliyor ve bu işlem 26-30 gün arası sürüyor (liman trafiğine bağlı olarak belki daha bile uzun). Yani eşyalarınıza bel bağlamayın, ihtiyacınız olabilecek şeyleri yanınıza alın.</p>

<h3 id="ev-bulmak">Ev Bulmak</h3>

<p>Çalışma izninizi, vizenizi aldınız, eşyalarınızı yollayıp bir Airbnb ayarladınız (veya bizim durumumuzda olduğu gibi şirketiniz geçici bir servis apartmanı<sup id="fnref:servis" role="doc-noteref"><a href="#fn:servis" class="footnote" rel="footnote">5</a></sup> ayarladı) uçağınıza atlayıp İrlanda’ya geldiniz. Zorlu süreç geride kaldı diye düşünüyorsanız çok yanılıyorsunuz çünkü zorluklar asıl şimdi başlıyor: İrlanda’da ev bulmak gerçekten çok zor. Evler küçük, eski ve pahalı<sup id="fnref:pahali" role="doc-noteref"><a href="#fn:pahali" class="footnote" rel="footnote">6</a></sup>. Böyle olmalarına rağmen çok hızlı gidiyorlar. Başvuru yaparken de telefonla aramayı kabul etmiyorlar, bilgilerinizi ve niyetinizi içeren bir e-mail atıyorsunuz, onlar da sıradan cevap veriyorlar. Sabah eklenen bir ilana öğlen bakıyorsanız sizden önce 500 kişi incelemiş ve başvuru yapmış oluyor, sıra size gelene kadar ilan yayından kalkıyor. İlk günlerde yaptığımız 30 küsür başvuruya cevap dahi gelmedi. Neyse ki sonradan işin sırrını öğrendik, bu sefer de cevaplar yağmur olup yağdı, günde 3 ev bakmaya başladık ve kısa sürede beğendiğimiz bir ev bulduk. Bu konuda tavsiyelerim şu şekilde olacak:</p>

<ul>
  <li><a href="https://www.daft.ie/">daft.ie</a>‘ye kayıt olun ve e-mail bildirimlerini açın (yeni eklenen ilanlar posta kutunuza düşüyor, böylelikle ilk başvuran olabiliyorsunuz).</li>
  <li>Adınızı soyadınızı, nerede çalıştığınızı, kaç para kazandığınızı (evet, burada maaşınızı doğrudan soruyorlar), kiralayacağınız evde kaç kişi kalacağınızı, evcil hayvanınız olup olmadığını (evcil hayvan seçeneklerinizi epey azaltıyor) içeren bir taslak hazırlayın. Beğendiğiniz bir ilan görünce hemen bu taslağı ilan üzerinden e-mail olarak gönderin.</li>
  <li>Taslağınızda bir yıllık sözleşme yapabileceğinizi, banka hesap özetlerinizin<sup id="fnref:statements" role="doc-noteref"><a href="#fn:statements" class="footnote" rel="footnote">7</a></sup> ve iş referanslarınızın<sup id="fnref:reference" role="doc-noteref"><a href="#fn:reference" class="footnote" rel="footnote">8</a></sup> hazır olduğunu belirtin.</li>
  <li>Eğer benim gibi bir teknoloji firmasında çalışıyorsanız bunu mutlaka belirtin<sup id="fnref:tech" role="doc-noteref"><a href="#fn:tech" class="footnote" rel="footnote">9</a></sup>.</li>
  <li>Sizi aradıklarında mutlaka evi görmek için randevulaşın. Fotoğraflara kanıp aldanmayın, bazı evlerin ne kadar eski olduğu gidip görülünce anlaşılıyor.</li>
</ul>

<h3 id="oturma-i̇zni">Oturma İzni</h3>

<p>İrlanda’ya ilk geldiğinizde vizeniz ne kadar uzun süreli olursa olsun göçmenlik polisi pasaportunuza 90 günlük geçici oturma izni işliyor ve daha uzun süreli kalmak istiyorsanız göçmenlik bürosuna kayıt olup oturma izni almanız gerekiyor. Eğer Dublin dışında oturuyorsanız oturma izni almak oldukça kolay. En yakın Garda<sup id="fnref:garda" role="doc-noteref"><a href="#fn:garda" class="footnote" rel="footnote">10</a></sup> karakoluna pasaportunuz ve çalışma izninizle başvuruyorsunuz ve izninizi alıyorsunuz. Fakat bizim gibi Dublin’de oturuyorsanız durum biraz sıkıntılı; izin yalnızca <a href="https://burghquayregistrationoffice.inis.gov.ie/">Burgh Quay Registration Office</a>‘ten alınıyor ve bunun için de online randevu sisteminden randevu almanız gerekiyor. Sıkıntı olan şey o randevuyu alabilmek işte, sistem 3 aylık periyotlar halinde randevu açıyor ve genelde hemen kapanıyor. Pandemiden dolayı yoğunluk arttığı için randevu alabilmemiz epey zor oldu. Yaklaşık 2 hafta boyunca her gün saat 10:00 ve 14:30’da 45 dakika boyunca sisteme abandım (söylentilere göre sabah 10’da, sitelerine göre öğlen 14:30’da yakın dönemli randevular açılıyor). Artık oturma iznimiz dolacak, bizi sınır dışı edecekler diye düşünüyordum ki yine böyle sisteme yüklendiğim bir günde yaklaşık 10 tane randevu açıldı, hemen 3 gün sonrasına alabildim bir tane (normalde iki-iki buçuk ay sonrasına bulmak mucize sayılıyor). İyi haber, ofis akşam 9’a kadar açık; kötü haber, göçmenlik bürosu bizim devlet dairelerini mumla aratıyor. Hele bizim gibi randevunuzu saat 4’e alıp mesai değişimine denk gelirseniz hiçbir şey yapmadan oturan memurları sizi oturttukları yerden izleyebilirsiniz. Neyse ki işlemin kendisi 10 dakika sürüyor, önden bir kağıda adresinizi yazmanızı istiyorlar, pasaport, çalışma izni ve sağlık sigortanızı (mutlaka sigortanız olsun!) kontrol edip pasaportunuza oturma izninizin numarasını işliyorlar. Birkaç gün sonra da o numaranın yazılı olduğu IRP (Irish Residency Permit) kartınız adresinize geliyor. Bizimki geldiğinde omuzlarımdan on tonluk bir yük kalkmıştı. Siz de benim gibi böyle strese girmek istemiyorsanız yapmanız gerekenler çok basit:</p>

<ul>
  <li>Mümkünse İrlanda’ya gelmeden o randevuyu almaya çalışın. Yalnızca pasaport numaranızla randevu alabiliyorsunuz.</li>
  <li>Randevu almak için sistemi otomatik olarak yoklayan ve randevu açıldığında bildirim gönderen bir Chrome eklentisi var. Bazıları çok öneriyor, ben önermiyorum. Girdiğiniz bilgileri topladığını ve bir şekilde kullandığını düşünüyorum. Ben denedim ve açıkcası bildirimleri aldığımda ben randevuyu çoktan almıştım bile. Sayfayı otomatik doldurmak için bir form doldurma eklentisi (arada sayfanın geçerliliği bitebiliyor ve formu tekrar doldurmak gerekiyor) yükleyin ve her gün saat 10:00 ve 14:30’da “Find appointment” butonuna tıklayın (ve yarım saat boyunca tıklamaya devam edin).</li>
  <li>Randevuyu aldığınıza dair bir e-posta gelecek, onun çıktısını yanınızda götürün (dışarıda sıra oluyor, o çıktıdaki saate göre içeri alıyorlar).</li>
  <li>Randevuyu sabah erken saatlere alın, mesai değişimlerine denk gelmeyin.</li>
  <li>Yanınızda tükenmez kalem götürün (adres yazmak için lazım olacak, pandemi döneminde başkalarının dokunduğu kalemleri kullanmayın, neme lazım :))</li>
  <li>Mutlaka sağlık sigortası yaptırın ve poliçenizi yanınızda götürün.</li>
  <li>Oraya bizim gibi arabayla gitmeyin, gidecekseniz de oldukça erkenden gidin. Yakın çevrede park edecek yer yok ve trafik çok.</li>
</ul>

<h2 id="i̇rlandada-yaşam">İrlanda’da Yaşam</h2>

<p>Epey uğraştık fakat artık arkamıza yaslanıp biraz keyfini sürme zamanı. Sandığımızın aksine hayat İrlanda’da çok da farklı değil. Evet belki köşede bakkal yok, yola adımınızı atmadan önce de sola değil sağa bakmanız gerekiyor ama kısa sürede alışılamayacak bir kültür farklılığı yok.</p>

<h3 id="telefon-ve-i̇nternet">Telefon ve İnternet</h3>

<p>İrlanda’da Vodafone, Virgin, GoMo, Three, 48 ve Eir telefon hizmeti sağlıyor. Türkiye’deyken hanımla Vodafone kullanıyorduk fakat buradaki Vodafone tarifelerini pahalı bulduk. 48 diye daha çok gençlere yönelik hizmet sunan ve Three’nin altyapısını kullanan operatörün tam da biz geldiğimiz ay bir kampanyası vardı. Ön ödemeli (faturasız - kontörlü) hatlarda sınırsız arama, sınırsız mesajlaşma ve 100GB internet aylık €7.99’ydu. Bizim Türkiye’deki kullanımlarımızla karşılaştırınca bu tarife bize uygun göründü ve internetten SIM card siparişi verdik, iki gün sonra da elimize geçti. Şimdilik memnunuz, kapsama alanı sorunu yaşamadık ve 100GB internet de oldukça yeterli (evde zaten kablosuz internet var). Fakat henüz üç park ve yeni evimiz dışında bir yere gitmediğimizi göz önünde bulundurunca kesin bir karara vermek için çok erken.</p>

<p>İnternet için de Vodafone, Virgin, Sky ve Eir var. Biraz araştırdım, Vodafone, Sky ve Eir aynı telefon altyapısını kullanıyormuş. Dolayısıyla hizmetlerini tam olarak sunabildikleri yerler kısıtlı. Örneğin benim eve en fazla 80Mbps hız verebildiler. Fakat Virgin televizyon altyapısını kullanıyor ve hizmet alanı daha geniş. Ben Virgin’den içinde televizyon, 250Mbps internet ve ev telefonu olan Big Bundle paketini aldım, aylık €69. İleride internet hızını belki daha da yükseltebilirim ama Türkiye’deki cılız ve limitli internetten sonra sınırsız 250Mbps bile fazla geldi, şimdilik gayet memnunum.</p>

<h3 id="elektrik-su-doğalgaz">Elektrik, Su, Doğalgaz</h3>

<p>Öncelikle iyi haber: İrlanda’da su bedava. Evet, evde musluktan akan su için hiç para vermiyorsunuz. Bir aralar sembolik de olsa bir ücret alınması gündeme gelmiş, fakat hemen reddedilmiş. Kötü haberse elektrik ve doğalgaz oldukça pahalı. Enerji şirketleri yalnızca elektrik sağlayanlar veya hem elektrik hem doğalgaz sağlayanlar olarak ikiye ayrılıyor ve evinize birden fazla firma hizmet verebiliyor (örneğin İstanbul Anadolu yakasında olduğu gibi Enerjisa Ayedaş’a mecbur değilsiniz). Bizim ev sahibimiz SSE Airtricity’yi kullandığı ve halihazırda aboneliği olduğu için bize orayı tavsiye etti (böyle de bir şey var, abonelik iptal olmuyor, evde kim oturuyorsa ona devrediliyor). Ev sahibimin verdiği MPRN (elektrik aboneliği) numarasıyla telefonda yaklaşık yarım saatlik bir görüşme sonucunda aboneliği üzerime aldım. Sitelerindeki hesaplama aracına göre yıllık masrafımız €1600 (aylık €133) civarında olacak. Henüz ilk faturayı bile görmedik, bakalım dedikleri gibi olacak mı?</p>

<p>Evet, faturalarımız sonunda geldi. Geç gelmesinin sebebi faturaların iki aylık kesiliyor olmalarıymış. Kasım-Aralık faturası €480, Ocak-Şubat faturası €430 (elektrik ve doğalgaz birlikte). Şu anda aylık ortalama €227 civarında. Umuyorum ki yaz aylarındaki harcamayla ortalamaya yaklaşacağız ama yine de hesaplama aracının çıkardığı masraftan fazlasını yapacakmışız gibi geliyor. Sayaçları kendiniz okuyor ve sisteme kendiniz giriyorsunuz. Apartman dairelerinde durum farklı olabilir elbette, biz müstakil bir evde oturuyoruz. Yılda bir kere bir görevli gelip sayacı doğru okuyup okumadığınızı kontrol ediyormuş. Doğalgaz görevlisi iki kere geldi fakat elektrik görevlisini henüz görmedik.</p>

<h3 id="çöp">Çöp</h3>

<p>Çöp için ayrı bir başlık açtım, çünkü Türkiye’de bizim ücretsiz faydalandığımız çöp toplama hizmeti İrlanda’da ücretli ve oldukça zahmetli! Eğer bir apartmanda oturuyorsanız büyük ihtimalle apartmanın bir aboneliği zaten var ve çöp toplama ücreti de kiranıza dahil (dahil değilse aidat gibi aylık olarak ödemeniz gerekiyor). Ama müstakil bir evde oturacaksanız kendinize bir servis sağlayıcı seçiyorsunuz, aylık çıkaracağınız çöp miktarına göre de bir tarifeye abone oluyorsunuz. Örneğin biz The City Bin Co’nun standart paketine abone olduk, aylık 42 kg’a kadar çöpü €18’ya topluyorlar, 42 kg üstünde her 1 kg çöp için 30 cent alıyorlar (evet, toplarken tartıyorlar). Üstelik fiyatlar bulunduğunuz bölgeye göre değişiyor (kırsal kesimlerde daha pahalı olabiliyor). Abone olduktan sonra size 3 tane çöp kutusu getiriyorlar. İşte zahmetli dediğim kısım da burada başlıyor; tüm çöplerinizi uygun bir şekilde ayrıştırmalı ve doğru kutulara atmalısınız<sup id="fnref:recycle" role="doc-noteref"><a href="#fn:recycle" class="footnote" rel="footnote">11</a></sup>. Örneğin geri dönüşüm kutusuna organik bir çöp atarsanız çöp toplayıcınız size <a href="https://www.thejournal.ie/greyhound-bin-fines-3285068-Mar2017/">ceza kesebiliyor</a>. Bir de bunun üstüne çöp kutularını doğru günde taşıma yerleri dışarı bakacak şekilde kaldırıma çıkarmalısınız yoksa almadan gidiyorlar.</p>

<h3 id="alışveriş">Alışveriş</h3>

<p>Geldiğimizden beri karantinada olduğumuzdan yalnızca yiyecek içecek alışverişi yapabildik ve şimdiye kadar genellikle eve sipariş şeklinde yaptık. Fakat Noel döneminde uzun süreli bir tatile girince kısıtlamaların da hafiflemesiyle birlikte bir araba kiraladım ve şehir merkezinden uzaktaki marketlere gidip bir iki kez alışveriş yapabildik. Avrupa’nın her yerinde görebileceğiniz Tesco, SuperValu, Aldi, Lidl, Spar ve Dunnes burada da var. İçlerinden Aldi ve Lidl nispeten BİM havası veriyor: her şey oldukça ucuz, ürünler doğrudan kolilerinin içinden satılıyor, çok alakasız ürünler (mesela mikroskop) kısıtlı miktarda stoklara giriyor ve bitince bir daha gelmiyor. Yalnız BİM’den farkı kendi markalı ürünleri BİM markalı ürünlere göre çok daha kaliteli. Mesela Lidl’ın bir <a href="https://uk.openfoodfacts.org/product/4056489238942/tropical-juice-lidl">tropik meyve suyu</a> var, muhteşem bir tadı var, içinde meyveden başka hiçbir şey yok ve fiyatı da €1.40. Bu durum diğer marketlerde de geçerli. Bizim en çok kullandığımız market SuperValu oldu (çünkü evimize yürüme mesafesindeki tek market SuperValu). SuperValu’nun da kendi markalı ürünleri çok kaliteli ve uygun fiyatlı. Dunnes’dan iki kez alışveriş yapabildik, her €50’luk alışverişe €10’luk indirim fişi verdi ki €100’ya bir çocuklu bir ailenin bir haftalık alışverişinin yapılabildiğini düşünürseniz o paraya epey birşey alınabiliyor. Zaten genel olarak herşey çok ucuz, bizim ülkemizde sebze meyve daha ucuz diyenlere bakmayın, fiyatlar Türkiye’yle yarışır cinste ve buranın şöyle bir farkı var: aldığınız hiçbir ürünü seçmek zorunda değilsiniz, elinizi neye atsanız en kalitelisi geliyor. Tüm sebze-meyvenin üzerinde Class 1 yazıyor ve üzerlerinde en ufak bir çürük veya yara göremezsiniz, hepsi yağlı boya tablosundan fırlamış gibi. Bifteğin <a href="https://shop.supervalu.ie/shopping/product/1417880002">kilosu</a> yaklaşık €11, somonun <a href="https://shop.supervalu.ie/shopping/product/1039981000">kilosu</a> yaklaşık €16, tavuğun <a href="https://shop.supervalu.ie/shopping/product/1323450001">kilosu</a> yaklaşık €10. Zaten bir süredir viral olan fiş paylaşımlarından görmüşsünüzdür bu fiyatları.</p>

<div class="img-wrapper">
    
    <a target="_blank" rel="noopener noreferrer" href="/assets/img/shopping-supervalu-2021-01-11.png">
    
        <img src="/assets/img/shopping-supervalu-2021-01-11.png" class="center" alt="11 Ocak 2021 tarihli SuperValu alışveriş fişimiz" width="480px" />
    
    </a>
    
    <em>11 Ocak 2021 tarihli SuperValu alışveriş fişimiz</em>
</div>

<p>Tüm marketler aşağı yukarı benzer durumlarda. Yalnız iki marketi ayırmak istiyorum. Birincisi SPAR. Tüm şubeleri kendi aralarında çok tutarlı bir şekilde felaket. Çalışanları olsun, ürün çeşitliliği olsun, müşteri profili olsun böyle bir Avrupa ülkesine hiç yakışmıyor. İkincisi ise Fresh, fakat SPAR’ın tam tersine. Bizdeki Macrocenter veya Carrefour Gurme seviyesinde bir market Fresh. Başka hiçbir yerde bulunmayan markalar ve ürünler burada bulunabiliyor fakat tahmin edebileceğiniz gibi fiyatlar çok pahalı. Yine de arada ufak şımarıklıklar yapmak için uğranabilir.</p>

<h3 id="ulaşım">Ulaşım</h3>

<p>Ehliyetimi halen daha alamadım fakat birinci yılımızı doldurmamıza yakın artık bu konuda birşeyler söyleyebilirim sanırım. Zaten COVID-19 kısıtlamaları kalkalı çok olmadı, daha yeni yeni gezmeye başladık.</p>

<p>Öncelikle trafik tersten akıyor. Yayayken bile dikkat etmek gereken bir konu bu, çünkü karşıdan karşıya geçerken önce sola değil sağa bakmak gerekiyor. Araba sürmeye alışmak çok zaman almıyor ama çok önemli iki husus var: döner kavşağa girerken sağa değil sola dönmek gerekiyor (bizdeki uygulamanın aksine, kavşak içinde dönen aracın yol üstünlüğü olması ayrı bir konu) ve trafik ışıkları bizdeki gibi çalışmıyor. Mesela ışıklarda durdunuz ve ileri gitmek için bir ışık, sağa dönmek için de bir ışık var, fakat sağa dönüş ışığının kırmızısı yok. Düz yöndeki ışığın kırmızısı iki yönü de kontrol ediyor. Bu kırmızı söndüğü zaman sağa dönüş yeşili yanabilir veya yanmayabilir. Yanıyorsa geçiş hakkı sizin, yanmıyorsa karşıdan gelen araca yol verdikten sonra dikkatli bir şekilde geçmek serbest. Biraz kafa karıştırıcı fakat alıştıktan sonra çok da düşünmüyorsunuz. Yalnız bu uygulama bizim ülkede olsa her kavşakta ya kaza olurdu, ya da millet birbirine dalardı. Burada hiç sorun yaşandığını görmedim.</p>

<p>Dediğim gibi ehliyetimi hala alamadım, ehliyet alamadığım için sigorta alamıyorum, sigorta alamadığım için de araba alamıyorum, çünkü sigorta olmadan yola çıkmak yasak, çok büyük cezası var. Yeni çipli ve İngilizce basılmış ehliyetiniz bile olsa kabul etmiyorlar, tüm sürece sıfırdan girmek gerekiyor. Önce yazılı sınav var, benim yazılı sınavım COVID-19 kısıtlamaları yüzünden tam 9 ay ertelendi ve daha geçen hafta girebildim sınava (Eylül 2021). Sınavdan sonra sonuç belgesi hemen veriliyor, o belge ve göz muayenesiyle birlikte öğrenci sürücü belgesi (learner permit) alıyorsunuz. Bu belgeyle 6 ay boyunca araç sürebilirsiniz fakat yanınızda tam ehliyetini en az iki yıl önce almış birisiyle yolculuk etmeniz gerekiyor. Bu süre içerisinde de 12 saatlik bir sürüş eğitimi alıp süre sonunda direksiyon sınavına giriyorsunuz ve tam ehliyetinizi alıyorsunuz. Ondan sonra istediğiniz gibi trafiğe çıkabilirsiniz.</p>

<p>Tabi araba tek ulaşım aracı değil. Oldukça yaygın bir otobüs ağı var ve genelde herkes otobüs kullanıyor. Tren ve tramvay da var ama filmlerde veya dizilerde gördüğümüz gibi o muhteşem Avrupa şehirlerindeki gibi değil demiryolu ulaşımı. Daha ziyade İstanbul gibi. Ana arterlere gitmek veya uzun mesafeleri kısa sürede katetmek için kullanılabilir fakat onun dışında çok bir kullanışlılığı yok. Toplu taşıma için genellikle tren istasyonlarından alınabilen Leap Card adındaki bir kart kullanılıyor. NFC ile cep telefonunuzla para yükleyebiliyorsunuz bu karta, dilerseniz yine aynı İstanbul’daki gibi aylık (hatta çalıştığınız yer üzerinden alırsanız vergi indirimli yıllık) versiyonu da mevcut. Trenlerden inerken de kartı basmak gerekiyor (ilk basışta tam ücreti alıyor, inerken basınca gitmediğiniz kısmı iade ediyor). Bir de otobüse binerken eğer kısa mesafe gideceksiniz şoföre gideceğiniz yeri söylemeniz ve şoförün yanındaki cihaza okutmanız gerekiyor (normalde okutulan cihaz otobüse binince sağ tarafta) ki bütün yolun parasını almasın.</p>

<p>Şehir merkezinin biraz dışında oturuyorsanız toplu taşıma yine de yeterli olmayabiliyor, en yakın durağa ya da istasyona 10-15 dakika yürümek gerekebiliyor. Bizde de durum biraz böyle olduğundan çalıştığım şirket üzerinden işe gidip gelmek için Cycle To Work Scheme<sup id="fnref:cycle-to-work" role="doc-noteref"><a href="#fn:cycle-to-work" class="footnote" rel="footnote">12</a></sup> ile bir elektrikli bisiklet aldım. Şimdilik ofis hala kapalı olduğundan bir çocuk koltuğu aldım ve kızımı okula götürüp getirmek için kullanıyorum (hanıma da bir bisiklet sipariş ettim, gelince bu zorlu görevi ona devredeceğim). Çoğu yolda bisiklet şeridi var, pek çok insan da bisiklet kullanıyor. Ben yine de İrlandalı komşumun da telkinleriyle kızım bisikletteyken kaldırımdan gidiyorum.</p>

<h3 id="sağlık-hizmetleri">Sağlık Hizmetleri</h3>

<p>Avrupa ülkelerine bir laf söylenecekse hastanelerine laf edilir ya, o kesinlikle doğru. İrlanda da istisna değil, bizim Türkiye’deki gibi bir sağlık sistemi yok burada. Türkiye’deyken şirketim Acıbadem’den özel sağlık sigortası sunuyordu, ben de kızımı şirketin poliçesine dahil ettirmiştim (kendim cebimden ödeyerek). Evet, 3 yaşındaki bir çocuk için 5000TL biraz fazla, fakat Acıbadem hastanelerine istediğimiz gibi gidip elimizi kolumuzu sallaya sallaya çıkabiliyorduk (geceleyin mobil uygulamadan randevu alıp sabah çocuk doktorumuza gidebiliyorduk), 5 kuruş da para ödemiyorduk. Fakat burada durum öyle değil. Özel hastane pek yok, var olanlar da bizdeki özel hastaneler gibi her branşın olduğu devasa hastaneler değiller. Ama devlet hastaneleri de bizdeki gibi feci durumda değil. Öyle dolan taşan aciller yok. Zaten burada acil kavramı biraz daha farklı, olması gerektiği gibi gerçekten acil durumlara bakıyorlar. Üstelik aciller ücretsiz değil, her bir ziyaret €100. Biz çocuğu bir kere acile götürdük, ki bize göre acillik bir durumdu (pazar günü de olması nedeniyle), her ne kadar gayet iyi ilgilendiyseler de açık bir şekilde durumumuzun acil olmadığını ve böyle durumlarda acile gelmememiz gerektiğini söylediler. Eğer açık bir kanamanız, bir kırığınız ya da hayati tehlikeniz yoksa aile hekiminize (GP: General Practitioner) görünmeniz gerekiyormuş. Aile hekiminiz uygun görürse sizi hastaneye yönlendirebiliyor. Taşınma sırasında sırtımı incittiğim için bir kez GP’ye göründüm, muayene edip ilacımı verdi ve gönderdi. Ben gayet yeterli buldum, ama yine de ülkemizdeki sağlık hizmetini tercih ederdim.</p>

<p>Bu yazıyı yazdıktan bir kaç ay sonra eşim bahçede çocukla koşarken bileğini burktu ve düştü. Yukarıdaki olay sebebiyle acile götürüp götürmemem gerektiğine karar veremedim, bileğini kırmış da olabilirdi çünkü, epey de şişti. Onun yerine şirketimin bize yaptığı sağlık sigortası Vhi’ın hemşire danışma merkezini aradım. Telefonda eşime bazı sorular sordular, bir nevi tetkik yaptılar ve bir süre gözlememizi, durum kötüye giderse acile gidebileceğimizi, gitmezse sabahleyin kliniklerine gelebileceğimizi söylediler. Biz de öyle yaptık, sabah arayıp geleceğimizi bildirdik, bir saat sonra da gittik. İki röntgen çekildi, kırık yokmuş neyse ki. Fakat ikinci dereceden bir burkulma olduğu için <a href="https://www.google.com/search?q=walking+boot">walking boot</a> ve koltuk değneği verdiler. Herşey için toplam €25 ödedik. Yaşadığımız önceki olayla karşılaştırınca oldukça sorunsuz bir süreç geçirdik. İrlanda’nın sağlık hizmetleriyle ilgili fikrim biraz değişmiş olabilir açıkcası.</p>

<h3 id="eğitim">Eğitim</h3>

<p>Yazıyı yazmamın üzerinden epey bir zaman geçti ve sanırsam artık eğitim üzerine de birşeyler yazabilirim. Türkiye’deyken kızımı bir Montessori kreşine gönderiyorduk (oldukça da yüklü bir meblağ ödüyorduk). Montessori eğitiminden memnun kaldığımız için burada da Montessori okullara baktık fakat gördük ki burada Montessori ismi korunan bir marka değil ve bu eğitimi versin vermesin toddler yaş grubunun (3-6 yaş) devam ettiği tüm okullara Montessori deniyor. Neyseki benim hanım böyle konularda çok ısrarcı ve takipçi. Gerçekten Montessori eğitimi veren bir okul bulup gönderdik. Okula başladığında 4 yaşına yeni girmişti ve hiç İngilizce bilmiyordu. Üzerinden 1 yıl geçti hala aynı okula devam ediyor ve çok akıcı İngilizce konuşuyor. İlk başladığında ufak tefek sıkıntılar yaşadık, hatta bir gün öğretmeni bizi aradı sizi özlemiş çok ağlıyor dedi. Biz anlamadık, hiç İngilizce bilmiyor nasıl söylemiş olabilir ki bunu derken gidince öğrendik. Meğerse “annemi istiyorum” diye ağlıyormuş fakat öğretmeni “I miss my mom” anlamış onu. Mesele de öğretmenin tuvalete gitmesiymiş, kendini yalnız hissetmiş. Sonraları açıldı iyicene (hiç konuşmadığı için arkadaşları onu konuşamıyor zannediyorlarmış :)), arkadaşları ve öğretmeninin de canayakın davranmasıyla onlarla konuşmaya başladı. Buralı oldu biraz, biz de rahatladık.</p>

<p>Yalnız İrlanda’da kreşlerin şöyle bir problemi var: hiçbiri tam gün değil. Öyle bir kavram bile yok. Sabah 9’dan öğlen 12’ye çalışıyorlar. Bizim okulda ekstra para vererek kalabildiğimiz bir “afternoon club” var, 12’de değil de 13:30’da bitiyor ve o sürede çocuklar yalnızca oyun oynuyor. Okul aslında normalde ücretsiz, ECCE denilen bir programa kaydoluyorsunuz ve ilkokula gidene kadar çocuğunuzun eğitim masraflarını devlet karşılıyor. Fakat bu afternoon club okulun tasarrufunda olan birşey, ekstraya giriyor ve aylık €150 bir ücreti var. Neyseki child support var, devlet çocuğun masrafları için aylık €140 ödüyor, biz de onunla afternoon club’ı ödüyoruz.</p>

<p>Öte yandan örgün eğitimli okulların da başka bir problemi var ki çoğu okulda hala kız-erkek ayrı eğitim görüyor. İlkokul 3. sınıfa kadar karışık ama oradan sonra üniversiteye kadar ayrı. Okulların çoğu ya kiliseye bağlı ya da kiliseden yardım alıyor, o yüzden böyle. Neyseki buna karşı çıkıp daha modern bir eğitim anlayışını benimsemiş Educate Together okulları var. Biz de böyle bir okul bulduk, seneye oraya devam edecek. Okullarda ayrımın kalkması konuşuluyor bu sıralar mecliste fakat kanun teklifi haline gelip kabul edilse bile uygulanması en erken 2030. Dolayısıyla bu problem çözülene kadar önce okul bulup ondan sonra ev bulmakta fayda var.</p>

<h3 id="park-ve-bahçeler">Park ve Bahçeler</h3>

<p>İlk geldiğimizde Google binasına yakın bir yerde kalıyorduk ve yürüme mesafesinde üç tane park vardı: Merrion Square Park, St Stephen’s Green ve Ringsend Park. Araba kiraladığımız dönemde Herbert Park’a ve Phoenix Park’a gittik. Phoenix Park inanılmaz büyük ve içinde bir hayvanat bahçesi bile var. Şu anda oturduğumuz yerde ise Saint Anne’s Park ve North Bull Island yürüme mesafesinde. Saint Anne’s Park 97 hektarlık alanıyla Dublin’in ikinci en büyük ve bana göre en güzel parkı. İçinde 35 tane çim saha (rugby, futbol, kriket vs için kullanılan), 18 tenis kortu, 1 tane de golf sahası var. North Bull Island ise 5km uzunluğunda 800m genişliğinde bir adacık. Oldukça geniş bir kumsalı ve kendine has bir faunası var. Kesinlikle görülmesi gereken yerlerden biri. Anlata anlata bitmez ama kısaca şunu söyleyebilirim: İstanbul’un tam tersine Dublin’de nerede oturursanız oturun, yakınlarda çocuğunuzun rahat rahat koşup oynayabileceği, keyifle bisiklete binebileceğiniz, arkadaşlarınızla top oynayabileceğiniz bir yer her zaman var.</p>

<div class="img-wrapper">
    
    <a target="_blank" rel="noopener noreferrer" href="/assets/img/parks.png">
    
        <img src="/assets/img/parks.png" class="center" alt="Parklar" width="480px" />
    
    </a>
    
    <em>Parklar</em>
</div>

<h3 id="ufak-tefek-meseleler">Ufak Tefek Meseleler</h3>

<p>Kendi başına bir başlığı haketmese de kısaca şikayet etmek istediğim bazı konular var.</p>

<p><strong>İçme suyu:</strong> Damacana su diye bir kavram yok burada. En büyük 5 litrelik şişeler var. Uzunca bir süre bunlardan alarak idare ettik fakat gördük ki bu sular çok kireçli. Çevreden öğrediğimiz kadarıyla herkes musluk suyu içiyor, en fazla filtre kullanıyor. Biz de Brita’nın filtreli su tankını aldık (sürahi diyemedim, 8 litre kapasiteli ve musluklu bir <a href="https://www.brita.ie/water-filter-jugs#to-flow">kap</a>). Böylesi çok daha iyiymiş, hem artık suya para vermiyoruz hem de kireç şikayetimiz tamamen kalktı. Görünen o ki musluk suları çok daha iyi.</p>

<p><strong>Çay:</strong> Komşu ülke İngiltere olunca insan çok iyi çaylar bekliyor ama yok, buradaki çaylar bir tür işlemden geçirilmiş çay topakları. Öyle bizim çayımız gibi yaprak yaprak değil. <a href="https://www.ayla.ie">Ayla</a> isminde bir Türk marketi var Dublin merkezde, oradan Çaykur Altınbaş alıyoruz.</p>

<p><strong>Peynir:</strong> Ezine peyniri yok burada. Binbir çeşit peynir var, Ezine yok. Lanet gibi, Ezine dışında hiçbir peyniri yiyemiyorum. Benim gibiyseniz Dunnes’da satılan Olympus marka feta peyniri iştahınız biraz olsun dindirebilir.</p>

<p><strong>Yoğurt:</strong> Yoğurt konusunda da çok seçiciyim ama arkadaş buradaki yoğurtlar da çok kötü. Yoğurtlar genellikle meyveli, sade olanları da cıvık cıvık, su gibi. Kıvam ve tat olarak bizim yoğurdun yanına yaklaşabilen bir tek Dunnes’ın Greek yoğurdu var (anlayacağınız üzere mutfak alışverişi için tercihimiz Dunnes).</p>

<p><strong>Evler:</strong> İnşaat kaliteleri çok kötü. Yeni evler de, eski evler de gerçekten berbatlar. Çevremizdeki İrlandalılar da inşaat konusunda pek iyi olmadıklarını kabul ediyorlar. Çok basit bir örnek vereyim, bizim evde su ısıtmanın 3 farklı yolu var: banyo ve mutfaktaki musluklardan akan suyu evin elektrikli su tankı ısıtıyor, kaloriferin suyunu kombi ısıtıyor, duşun suyunu elektrikli batarya ısıtıyor. Bunun sonucu olarak da eşek yüküyle elektrik parası ödediğimiz yetmiyormuş gibi mutfak ve banyo musluklarından da 7/24 sıcak su alamıyoruz. Ayrıca mutfağın içinde hiçbir kalorifer yok, aynı zamanda mutfağın izolasyonu da yok. Evin tamamı hamam gibiyken mutfakta fırtınalar esebiliyor.</p>

<p><strong>Ehliyet:</strong> Bu konudaki şikayetimi ulaşım başlığında zaten dile getirdim ama bir kez daha değinmeden edemedim. Yahu üzerinde herşeyin İngilizce yazdığı çipli ehliyetimi kabul etmiyorsunuz, hadi anladım, hiç olmazsa yeni ehliyeti alırken biraz kolaylık gösterseydiniz ya!</p>

<p><strong>Bürokrasi:</strong> Devlet daireleri çok yavaş. Öyle böyle değil. Oturma izniniz dolsa sizi ülkenize göndermeleri en az bir yıl sürer, öyle bir yavaşlık var. Bizim ülkemizde e-devlet üzerinden bir tıklamayla veya hükümet konağında bir günde halledilebilecek işlerin buradaki yapılma süreleri 15-20 iş günü.</p>

<h2 id="dipnotlar">Dipnotlar</h2>
<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:philanthropist" role="doc-endnote">
      <p>İng. hayırsever, yardımsever <a href="#fnref:philanthropist" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:mulayim" role="doc-endnote">
      <p>Korkusuz Korkak 1979 yapımı, başrolünü Kemal Sunal’ın oynadığı, yönetmenliğini Natuk Baytan’ın yaptığı absürd komedi türünde bir film. Filmin esas karakteri Mülayim Sert 6 aylık ömrünün kaldığını zannederek piyango biletine isabet eden ikramiyeyi umumi tuvalet yaptırmak için harcar. Kendisiyle röportaj yapan basın mensubunun “neden tuvalet” sorusuna “ben bu vakitte gelen paranın anca içine ederim” diye cevap verir. <a href="#fnref:mulayim" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:population" role="doc-endnote">
      <p>Apple, Google, Microsoft, Facebook gibi pek çok teknoloji firmasının İrlanda’da ofisi var fakat İrlanda’nın nüfusu yalnızca 4.9 milyon (kaynak: <a href="https://www.worldometers.info/world-population/ireland-population/">https://www.worldometers.info/world-population/ireland-population/</a>) <a href="#fnref:population" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:moving" role="doc-endnote">
      <p>Uluslararası taşımada tüm eşyalar gümrükten geçeceği için gümrük kurallarına uygun olmayan bir durumun olmaması amacıyla (örneğin hiçbir sıvı, canlı bitki veya yiyecek gümrükten geçemiyor) kolileri kendileri yapmak istiyorlar, bu nedenle isteseniz de eşyaları kendiniz toparlayamıyorsunuz. Biz başta biraz çekinmiştik, fakat gayet güzel topladılar herşeyi :) <a href="#fnref:moving" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:servis" role="doc-endnote">
      <p>Günlük kiralık evler. Bizim memlekettekinden farkı bu evler firmalar tarafından otel gibi işletiliyor. Her hafta kirli çarşaflarınızı ve havlularınızı alıp temizlerini veriyorlar, teknik servis vb ihtiyaçlarınızla ilgileniyorlar. <a href="#fnref:servis" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:pahali" role="doc-endnote">
      <p>Dev teknoloji şirketlerinin İrlanda’da ofis açması özellikle kiralık ev piyasasını alt üst etmiş. Buralarda yeni inşaatlara izin öyle pek kolay çıkmıyor, 4 kattan yüksek apartmanlara da neredeyse hiç rastlanmadığından dolayı maaşı üst baremden alanlar iyi evlere yüksek kiralar verip piyasayı kilitliyor. Neyse ki hükümet bu duruma bir el atmış ve Rent Pressure Zone diye birşey icat etmiş. Kiraladığınız ev böyle bir bölgedeyse kiranız belli bir sınırın üzerine çıkamıyor ve ev sahibiniz yıllık %4’ten fazla zam yapamıyor. Fakat bu durum yeteri kadar kiralık ev olmadığı gerçeğini değiştirmiyor. <a href="#fnref:pahali" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:statements" role="doc-endnote">
      <p>İrlanda’da bankalar üç aylık hesap özetleri sunuyor. Eğer banka hesabınız henüz hazır değilse Türkiye’deki bankanızdan alacağınız son üç veya altı aylık hesap özetiniz de iş görecektir. <a href="#fnref:statements" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:reference" role="doc-endnote">
      <p>Şirketinizden o şirkette çalıştığınıza ve aldığınız maaşa dair bir belge almanız gerekiyor. Aslında önceki ev sahiplerinizden de referans istiyorlar fakat İrlanda’ya ilk kez gelenler için bu pek mümkün olmadığından anlayışla karşılıyorlar. <a href="#fnref:reference" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:tech" role="doc-endnote">
      <p>Firmanın adıyla değil, doğrudan “tech company” şeklinde. Anladığım kadarıyla emlakçılar ve ev sahipleri belli kelimeler üzerinden filtreler oluşturmuşlar ve bunlara uygun SEO yapmak gerekiyor. <a href="#fnref:tech" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:garda" role="doc-endnote">
      <p>İrlanda’nın ulusal polis teşkilatı. Türk polisinin aksine silah taşımazlar. <a href="#fnref:garda" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:recycle" role="doc-endnote">
      <p>Marketten aldığınız ürünlerin hemen hemen hepsinin üzerinde geri dönüştürülüp dönüştürülemeyeceği yazıyor. Eğer “fully recycled” ise çöpünüzü yıkayıp kurutup (evet, temiz ve kuru olmalı!) geri dönüşüm kutusuna atabiliyorsunuz. Eğer “not yet recycled” ise “general waste” kutusuna gidiyor. Organik çöplerse (yiyecek artığı gibi) kompost olmak üzere organik çöpüne atılıyor. <a href="#fnref:recycle" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:cycle-to-work" role="doc-endnote">
      <p>Cycle To Work Scheme ile normal bisikletlerde €1250, elektrikli bisikletlerde €1500’ya kadar olan bisikletleri şirketiniz alıyor ve brüt üzerinden maaşınıza yansıtıyor. Böylece yaptığınız harcamanın önemli bir kısmı vergiden düşmüş oluyor (durumunuza bağlı olarak bu miktar %50’ye kadar çıkabiliyor). <a href="#fnref:cycle-to-work" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
  </ol>
</div>]]></content><author><name>Oguz Konya</name></author><category term="hayat" /><category term="yurt-dışı" /><summary type="html"><![CDATA[Uzun zamandır yazmıyorum fakat son bir yıldır bir yandan işlerin yoğunluğu, bir yandan çoluk-çocuk, bir yandan COVID-19, bir yandan taşınma derken birşeyler yazmaya pek vakit bulamadım. Aslında “draft” klasörümde yarım kalmış 4 tane yazı var fakat Medium gibi sitelerde sıkça gördüğümüz 100-200 kelimelik yazılardan nefret ediyorum, yazım mümkün olduğunca kapsamlı olsun istiyorum. Böyle olunca da bir yazıya epey vakit ayırmam gerekiyor, çoğu zaman da bitiremeden aklım başka yerlere kayıyor.]]></summary></entry><entry><title type="html">Formatting Big Numbers: The aa Notation</title><link href="https://oguzkonya.com/formatting-big-numbers-aa-notation/" rel="alternate" type="text/html" title="Formatting Big Numbers: The aa Notation" /><published>2019-09-05T00:00:00+00:00</published><updated>2019-09-05T00:00:00+00:00</updated><id>https://oguzkonya.com/formatting-big-numbers-aa-notation</id><content type="html" xml:base="https://oguzkonya.com/formatting-big-numbers-aa-notation/"><![CDATA[<p>If you are dealing with big numbers in your game, you might have encountered the issue of properly formatting them. Small numbers such as 1.000, 10.000 or even 100.000 are OK, but as you go larger, you’ll run out of space quickly. I mean, how can you fit <strong>1.000.000.000.000.000.000</strong> in a button?</p>

<p>But let’s say, you found a way. Let’s say you were able to put <strong>1.000.000.000.000.000.000</strong> in a button properly and it looks good (I can’t imagine how, but for the sake of the argument let’s assume it is possible). However, you still have the UX problem of clarity. No one will be able to see this number and say “oh my gosh, I have one quintillion cookies!”. I am a mathematician and even I can’t read it without counting zeros first.</p>

<p>There are two solutions to this problem and they both have pros and cons:</p>

<h2 id="scientific-notation">Scientific notation</h2>

<p>Mostly used by scientists and engineers, this notation is formatted as follows:</p>

<table>
  <tbody>
    <tr>
      <td>m x 10<sup>n</sup></td>
    </tr>
  </tbody>
</table>

<p>Where <strong>m</strong> is a real number called <em>coefficient</em>, and <strong>n</strong> is an integer called <em>mantissa</em>. In order to make this more concrete, let’s have a look at some examples:</p>

<table>
  <thead>
    <tr>
      <th>Number</th>
      <th>Scientific notation</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>1</td>
      <td>1</td>
    </tr>
    <tr>
      <td>1.000</td>
      <td>1x10<sup>3</sup></td>
    </tr>
    <tr>
      <td>5.000</td>
      <td>5x10<sup>3</sup></td>
    </tr>
    <tr>
      <td>1.250.000</td>
      <td>1,25x10<sup>6</sup></td>
    </tr>
    <tr>
      <td>1.254.678</td>
      <td>1,254678x10<sup>6</sup></td>
    </tr>
    <tr>
      <td>1.500.000.000</td>
      <td>1,5x10<sup>9</sup></td>
    </tr>
  </tbody>
</table>

<p>The good thing about this notation is that you can format any number. Moreover, by using only 2 (or as much as you want) digits after the decimal point, you can make your numbers fit in a limited amount of space.</p>

<p>The problem is that this notation is used by scientists and engineers (as I mentioned earlier), and it will not make any sense to most people. Even if it does, superscripts (I mean <sup>this</sup>) would look really tiny on mobile screens and would cause minor UX problems.</p>

<h2 id="single-letter-notation">Single letter notation</h2>

<p>There is no science backing up this notation, it’s something purely linguistic: single letter after the number. This is the notation you use in your daily life.</p>

<table>
  <thead>
    <tr>
      <th>Number</th>
      <th>Single letter notation</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>1</td>
      <td>1</td>
    </tr>
    <tr>
      <td>1.000</td>
      <td>1k</td>
    </tr>
    <tr>
      <td>5.000</td>
      <td>5k</td>
    </tr>
    <tr>
      <td>1.250.000</td>
      <td>1,25m</td>
    </tr>
    <tr>
      <td>1.254.678</td>
      <td>1,254678m</td>
    </tr>
    <tr>
      <td>1.500.000.000</td>
      <td>1,5x10b</td>
    </tr>
  </tbody>
</table>

<p>Since it’s already used by everyone, this notation has the advantage of being accessible. Almost everyone can tell 1.25m means <em>one million two hundred fifty thousand</em>. However, not many people would know that <strong>q</strong> in <strong>1.25q</strong> stands for <em>quadrillion</em> and it becomes more of an issue as you go larger. See for yourself: quintillion, sextillion, septillion, octillion, nonillion. Do you see anything familiar? Probably no, because these units are not used in daily life unless you are a scientist or a mathematician. We need something more intuitive.</p>

<h2 id="the-aa-notation">The “aa” notation</h2>

<p>A better solution is the combination of the two: single letter notation up until (but not including) quadrillion and a two letter representation of scientific notation after trillion. It may sound confusing, but you’ll agree that it’s actually rather clear when you see it in action:</p>

<table>
  <thead>
    <tr>
      <th>Number</th>
      <th>Written</th>
      <th>Scientific</th>
      <th>Single letter</th>
      <th>“aa”</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>1</td>
      <td>one</td>
      <td>1</td>
      <td>1</td>
      <td>1</td>
    </tr>
    <tr>
      <td>1.000</td>
      <td>one thousand</td>
      <td>1x10<sup>3</sup></td>
      <td>1k</td>
      <td>1k</td>
    </tr>
    <tr>
      <td>1.000.000</td>
      <td>one million</td>
      <td>1x10<sup>6</sup></td>
      <td>1m</td>
      <td>1m</td>
    </tr>
    <tr>
      <td>1.000.000.000</td>
      <td>one billion</td>
      <td>1x10<sup>9</sup></td>
      <td>1b</td>
      <td>1b</td>
    </tr>
    <tr>
      <td>1.000.000.000.000</td>
      <td>one trillion</td>
      <td>1x10<sup>12</sup></td>
      <td>1t</td>
      <td>1t</td>
    </tr>
    <tr>
      <td>1.000.000.000.000.000</td>
      <td>one quadrillion</td>
      <td>1x10<sup>15</sup></td>
      <td>1q</td>
      <td>1aa</td>
    </tr>
    <tr>
      <td>1.000.000.000.000.000.000</td>
      <td>one quintillion</td>
      <td>1x10<sup>18</sup></td>
      <td>1?</td>
      <td>1ab</td>
    </tr>
  </tbody>
</table>

<p>So, one quadrillion (10<sup>15</sup>) will be represented with <strong>aa</strong>. For every power of 1000 we’ll move the second letter up, so one quintillion (10<sup>18</sup>) will be <strong>ab</strong>, one sextillion will be <strong>ac</strong>, and so on. After <strong>az</strong>, we’ll move to <strong>ba</strong>, <strong>bb</strong>, <strong>bc</strong> etc. This algorithm provides an incremental representation of big numbers and it does not require any scientific or mathematical knowledge. The algorithm for this notation is rather simple and it’s really easy to implement in any programming language.</p>

<p>First we need to represent the number in a slightly modified scientific notation. Since we change the unit for every power of 1000 we’ll convert our number to this: m x 1000<sup>n </sup>. In order to find m and n, all we have to do is revert the formula and apply it:</p>

<pre class="language-csharp  line-numbers "><code>n = (int) log(value, 1000);
m = value / pow(1000, n);</code></pre>

<p>If n is less than 5 (i.e the number is less than 1x10<sup>15</sup>), we will use the single letter notation (K, M, B, or T). If it is greater than or equal to 5, we’ll convert this number to “aa” notation. So 5 (10<sup>15</sup>) will be <strong>aa</strong>, 6 (10<sup>18</sup>) will be <strong>ab</strong>, 7 (10<sup>21</sup>) will be <strong>ac</strong> and so on. Since there are 26 letters in English language, converting n to a two letter representation would require one modulo and one division operations:</p>

<pre class="language-csharp  line-numbers "><code>secondUnit = n % 26; 
firstUnit = n / 26; 
unit = firstUnit.toChar() + secondUnit.toChar();</code></pre>

<p>That’s all there is to it. And here is the implementation in C#:</p>

<pre class="language-csharp  line-numbers "><code>public static class CalcUtils
{
    private static readonly int charA = Convert.ToInt32(&#39;a&#39;);

    private static readonly Dictionary&lt;int, string&gt; units = new Dictionary&lt;int, string&gt;
    {
        {0, &quot;&quot;},
        {1, &quot;K&quot;},
        {2, &quot;M&quot;},
        {3, &quot;B&quot;},
        {4, &quot;T&quot;}
    };

    public static string FormatNumber(double value)
    {
        if (value &lt; 1d)
        {
            return &quot;0&quot;;
        }

        var n = (int) Math.Log(value, 1000);
        var m = value / Math.Pow(1000, n);
        var unit = &quot;&quot;;

        if (n &lt; units.Count)
        {
            unit = units[n];
        }
        else
        {
            var unitInt = n - units.Count;
            var secondUnit = unitInt % 26;
            var firstUnit = unitInt / 26;
            unit = Convert.ToChar(firstUnit + charA).ToString() + Convert.ToChar(secondUnit + charA).ToString();
        }

        // Math.Floor(m * 100) / 100) fixes rounding errors
        return (Math.Floor(m * 100) / 100).ToString(&quot;0.##&quot;) + unit;
    }
}</code></pre>]]></content><author><name>Oguz Konya</name></author><category term="maths" /><category term="programming" /><summary type="html"><![CDATA[If you are dealing with big numbers in your game, you might have encountered the issue of properly formatting them. Small numbers such as 1.000, 10.000 or even 100.000 are OK, but as you go larger, you’ll run out of space quickly. I mean, how can you fit 1.000.000.000.000.000.000 in a button?]]></summary></entry><entry><title type="html">Serializing a Node Based Editor in Unity</title><link href="https://oguzkonya.com/serializing-node-based-editor-unity/" rel="alternate" type="text/html" title="Serializing a Node Based Editor in Unity" /><published>2019-08-29T00:00:00+00:00</published><updated>2019-08-29T00:00:00+00:00</updated><id>https://oguzkonya.com/serializing-node-based-editor-unity</id><content type="html" xml:base="https://oguzkonya.com/serializing-node-based-editor-unity/"><![CDATA[<p>I actually don’t get a lot of feedback on my posts, but one post stood out: <a href="/creating-node-based-editor-unity/">Creating a Node Based Editor in Unity</a>. Some people asked for a more advanced version and some asked how they can save and load data to the editor. I can make an advanced version, but it probably wouldn’t cover all usage cases. On the other hand, serializing (and deserializing) a node list is a more common problem. Although I addressed some issues in <a href="/xml-serialization-and-deserialization-in-unity/">XML Serialization in Unity</a> post, I would like to complete the node based editor by adding save and load features in this post.</p>

<p>So, in this post we’ll have a look at those two posts, merge them together and fix some issues. We might even end up revisiting <a href="/creating-clone-unitys-console-window/">Creating a Clone of Unity’s Console Window</a>. After this tutorial, you’ll have a node based editor which can restore its last state after it is closed.</p>

<h3 id="revisiting-the-node-based-editor">Revisiting the Node Based Editor</h3>

<p>Well, it’s kind of obvious, but we need a node based editor in order to serialize it. We’ll use the code from <a href="/creating-node-based-editor-unity/">this</a> post, so if you haven’t already, go ahead and check it out now. It’s pretty straightforward, but we’ll have to modify it in order to properly serialize the nodes.</p>

<div class="img-wrapper">
    
    <a target="_blank" rel="noopener noreferrer" href="/assets/img/node-based-editor.gif">
    
        <img src="/assets/img/node-based-editor.gif" class="center" alt="Node based editor" width="480px" />
    
    </a>
    
    <em>The node based editor we created previously</em>
</div>

<h3 id="revisiting-xml-serialization">Revisiting XML Serialization</h3>

<p>There are a number of serialization options, such as JSON or Unity’s own serialization system. However, since we already covered XML serialization previously, why not use it? We’ll use the <code>XMLOp</code> class and some of the XML attributes from <a href="/xml-serialization-and-deserialization-in-unity/">this</a> post.</p>

<h3 id="revisiting-console-window-clone">Revisiting Console Window Clone</h3>
<p>This post is not that relevant to our matter at hand, but the node editor window lacks buttons for saving and loading. It would be nice to stick with Unity’s standards, so I’ll copy the menu bar from this window clone. It is easy to implement and nice to look at.</p>

<div class="img-wrapper">
    
    <a target="_blank" rel="noopener noreferrer" href="/assets/img/unity-console-window.png">
    
        <img src="/assets/img/unity-console-window.png" class="center" alt="Unity's console window" width="480px" />
    
    </a>
    
    <em>We'll copy the part that you see in area 1</em>
</div>

<h3 id="adding-a-menu-bar">Adding a Menu Bar</h3>

<p>We’ll start with adding a menu bar, and we’ll copy it from the console window clone:</p>

<pre class="language-csharp  line-numbers " data-start="21" data-line="21,22" data-filename="NodeBasedEditor.cs"><code>    private float menuBarHeight = 20f;
    private Rect menuBar;</code></pre>

<pre class="language-csharp  line-numbers " data-start="52" data-line="56,69-82" data-filename="NodeBasedEditor.cs"><code>    private void OnGUI()
    {
        DrawGrid(20, 0.2f, Color.gray);
        DrawGrid(100, 0.4f, Color.gray);
        DrawMenuBar();

        DrawNodes();
        DrawConnections();

        DrawConnectionLine(Event.current);

        ProcessNodeEvents(Event.current);
        ProcessEvents(Event.current);

        if (GUI.changed) Repaint();
    }

    private void DrawMenuBar()
    {
        menuBar = new Rect(0, 0, position.width, menuBarHeight);

        GUILayout.BeginArea(menuBar, EditorStyles.toolbar);
        GUILayout.BeginHorizontal();

        GUILayout.Button(new GUIContent(&quot;Save&quot;), EditorStyles.toolbarButton, GUILayout.Width(35));
        GUILayout.Space(5);
        GUILayout.Button(new GUIContent(&quot;Load&quot;), EditorStyles.toolbarButton, GUILayout.Width(35));

        GUILayout.EndHorizontal();
        GUILayout.EndArea();
    }</code></pre>

<p>On line 56, we call <code>DrawMenuBar()</code> method and between lines 69-82 we create the menu bar. The console window clone had a button and 6 toggles, but since we are only serializing and deserializing, we need no more than two buttons. Keep in mind that the editor GUI system has a draw order and it <strong>draws elements from back to front in the order you call them</strong>. That’s why we are drawing the menu bar after drawing the grid. Otherwise the grid would have been drawn over the menu bar.</p>

<div class="img-wrapper">
    
    <a target="_blank" rel="noopener noreferrer" href="/assets/img/grid-over-menu-bar.png">
    
        <img src="/assets/img/grid-over-menu-bar.png" class="center" alt="Grid over menu bar" width="480px" />
    
    </a>
    
    <em>DrawMenuBar() is called before DrawGrid(), hence the ugly grid over the menu bar.</em>
</div>

<p>Currently, save and load buttons do nothing, but we’ll get to that.</p>

<h3 id="serialization">Serialization</h3>

<p>Next up, we need to prepare our classes (<code>Node</code> and <code>Connection</code>) for serialization. Let’s remember the two important key points about XML serializing:</p>

<ol>
  <li>XML serializer can only serialize public fields.</li>
  <li>Class to be serialized should have a parameterless constructor.</li>
</ol>

<p>Rule number 1 doesn’t cause that many problems (it still causes some but we’ll get to that), but rule number 2 is problematic. Both of our classes have constructors <strong>with</strong> parameters. Let’s fix that first:</p>

<pre class="language-csharp  line-numbers " data-start="21" data-line="21" data-filename="Node.cs"><code>    public Node() { }
    
    public Node(Vector2 position, float width, float height, GUIStyle nodeStyle, GUIStyle selectedStyle, GUIStyle inPointStyle, GUIStyle outPointStyle, Action&lt;ConnectionPoint&gt; OnClickInPoint, Action&lt;ConnectionPoint&gt; OnClickOutPoint, Action&lt;Node&gt; OnClickRemoveNode)
    {
        rect = new Rect(position.x, position.y, width, height);
        style = nodeStyle;
        inPoint = new ConnectionPoint(this, ConnectionPointType.In, inPointStyle, OnClickInPoint);
        outPoint = new ConnectionPoint(this, ConnectionPointType.Out, outPointStyle, OnClickOutPoint);
        defaultNodeStyle = nodeStyle;
        selectedNodeStyle = selectedStyle;
        OnRemoveNode = OnClickRemoveNode;
    }</code></pre>

<pre class="language-csharp  line-numbers " data-start="11" data-line="11" data-filename="Connection.cs"><code>    public Connection() { }
    
    public Connection(ConnectionPoint inPoint, ConnectionPoint outPoint, Action&lt;Connection&gt; OnClickRemoveConnection)
    {
        this.inPoint = inPoint;
        this.outPoint = outPoint;
        this.OnClickRemoveConnection = OnClickRemoveConnection;
    }</code></pre>

<p>Next, we are going to <strong>ignore</strong> the properties that can’t be serialized or don’t need to be serialized. For example, in <code>Node</code> class, <code>GUIStyle</code>s can be left out of serialization, because they are already provided by the editor itself. We don’t need <code>isDragged</code> or <code>isSelected</code> either. Actually, Node class has only one property that needs to be serialized: the <code>rect</code>. Let’s see how <code>Node</code> class looks like after properly <strong>ignoring</strong> unnecessary and unserializable properties:</p>

<pre class="language-csharp  line-numbers " data-start="5" data-line="9-20" data-filename="Node.cs"><code>public class Node
{
	public Rect rect;

	[XmlIgnore] public string title;
	[XmlIgnore] public bool isDragged;
	[XmlIgnore] public bool isSelected;

	[XmlIgnore] public ConnectionPoint inPoint;
	[XmlIgnore] public ConnectionPoint outPoint;

	[XmlIgnore] public GUIStyle style;
	[XmlIgnore] public GUIStyle defaultNodeStyle;
	[XmlIgnore] public GUIStyle selectedNodeStyle;

	[XmlIgnore] public Action&lt;Node&gt; OnRemoveNode;

	public Node() { }</code></pre>

<p><code>Node</code> class is ready to be serialized at this point. So, let’s serialize nodes!</p>

<h3 id="saving-nodes">Saving Nodes</h3>

<p>Remember the save button which did nothing at all? Well, it should at least save nodes, since they are now serializable. The method for saving nodes is really simple:</p>

<pre class="language-csharp  line-numbers " data-start="321" data-line="321-324" data-filename="NodeBasedEditor.cs"><code>    private void Save()
    {
        XMLOp.Serialize(nodes, &quot;Assets/Resources/nodes.xml&quot;);
    }</code></pre>

<p>And we are going to call that method when the user clicks Save button:</p>

<pre class="language-csharp  line-numbers " data-start="69" data-line="76-79" data-filename="NodeBasedEditor.cs"><code>    private void DrawMenuBar()
    {
        menuBar = new Rect(0, 0, position.width, menuBarHeight);

        GUILayout.BeginArea(menuBar, EditorStyles.toolbar);
        GUILayout.BeginHorizontal();

        if (GUILayout.Button(new GUIContent(&quot;Save&quot;), EditorStyles.toolbarButton, GUILayout.Width(35)))
        {
            Save();
        }
        
        GUILayout.Space(5);
        GUILayout.Button(new GUIContent(&quot;Load&quot;), EditorStyles.toolbarButton, GUILayout.Width(35));

        GUILayout.EndHorizontal();
        GUILayout.EndArea();
    }</code></pre>

<p>Now, open up your <strong>Node Based Editor</strong>, place a couple of nodes, and then hit <strong>Save</strong> (you must have a <strong>Resources</strong> folder under <strong>Assets</strong> before doing that). Unity will create a file called <code>nodes.xml</code> in <strong>Resources</strong>, if you can’t see it, simply right-click on <strong>Resources</strong> and then click <strong>Reimport</strong>. Contents of the <code>nodes.xml</code> file should be something like this:</p>

<pre class="language-csharp  line-numbers " data-filename="nodes.xml"><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
&lt;ArrayOfNode xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns:xsd=&quot;http://www.w3.org/2001/XMLSchema&quot;&gt;
  &lt;Node&gt;
    &lt;rect&gt;
      &lt;x&gt;166&lt;/x&gt;
      &lt;y&gt;183&lt;/y&gt;
      &lt;position&gt;
        &lt;x&gt;166&lt;/x&gt;
        &lt;y&gt;183&lt;/y&gt;
      &lt;/position&gt;
      &lt;center&gt;
        &lt;x&gt;266&lt;/x&gt;
        &lt;y&gt;208&lt;/y&gt;
      &lt;/center&gt;
      &lt;min&gt;
        &lt;x&gt;166&lt;/x&gt;
        &lt;y&gt;183&lt;/y&gt;
      &lt;/min&gt;
      &lt;max&gt;
        &lt;x&gt;366&lt;/x&gt;
        &lt;y&gt;233&lt;/y&gt;
      &lt;/max&gt;
      &lt;width&gt;200&lt;/width&gt;
      &lt;height&gt;50&lt;/height&gt;
      &lt;size&gt;
        &lt;x&gt;200&lt;/x&gt;
        &lt;y&gt;50&lt;/y&gt;
      &lt;/size&gt;
      &lt;xMin&gt;166&lt;/xMin&gt;
      &lt;yMin&gt;183&lt;/yMin&gt;
      &lt;xMax&gt;366&lt;/xMax&gt;
      &lt;yMax&gt;233&lt;/yMax&gt;
    &lt;/rect&gt;
  &lt;/Node&gt;
  &lt;Node&gt;
    &lt;rect&gt;
      &lt;x&gt;345&lt;/x&gt;
      &lt;y&gt;345&lt;/y&gt;
      &lt;position&gt;
        &lt;x&gt;345&lt;/x&gt;
        &lt;y&gt;345&lt;/y&gt;
      &lt;/position&gt;
      &lt;center&gt;
        &lt;x&gt;445&lt;/x&gt;
        &lt;y&gt;370&lt;/y&gt;
      &lt;/center&gt;
      &lt;min&gt;
        &lt;x&gt;345&lt;/x&gt;
        &lt;y&gt;345&lt;/y&gt;
      &lt;/min&gt;
      &lt;max&gt;
        &lt;x&gt;545&lt;/x&gt;
        &lt;y&gt;395&lt;/y&gt;
      &lt;/max&gt;
      &lt;width&gt;200&lt;/width&gt;
      &lt;height&gt;50&lt;/height&gt;
      &lt;size&gt;
        &lt;x&gt;200&lt;/x&gt;
        &lt;y&gt;50&lt;/y&gt;
      &lt;/size&gt;
      &lt;xMin&gt;345&lt;/xMin&gt;
      &lt;yMin&gt;345&lt;/yMin&gt;
      &lt;xMax&gt;545&lt;/xMax&gt;
      &lt;yMax&gt;395&lt;/yMax&gt;
    &lt;/rect&gt;
  &lt;/Node&gt;
&lt;/ArrayOfNode&gt;</code></pre>

<p>So, our nodes can be serialized now and if we can serialize <code>Connection</code>s, our node editor will be completely serializable. Let’s get on with it then.</p>

<h3 id="serializing-connections">Serializing Connections</h3>

<p><code>Connection</code> class has only 2 properties that can be serialized: <code>inPoint (ConnectionPoint)</code> and <code>outPoint (ConnectionPoint)</code>. However, serializing these two properties would be meaningless, because objects do not keep references to other objects after deserialization. Which means, if we deserialize a connection, it would create two connection points and connect them, but those connection points wouldn’t belong to the nodes it used to connect (see the figure below).</p>

<div class="img-wrapper">
    
    <a target="_blank" rel="noopener noreferrer" href="/assets/img/serialization.png">
    
        <img src="/assets/img/serialization.png" class="center" alt="Broken connections" width="480px" />
    
    </a>
    
    <em>Serialization breaks connections and deserializing doesn't fix that.</em>
</div>

<p>In order to solve this issue, we need some kind of an identifier for a connection point, i.e a unique ID, so that after deserializing, we can look for those connection points by their IDs and give reference to actual objects to restore connections.</p>

<pre class="language-csharp  line-numbers " data-start="6" data-line="8,18,22,30" data-filename="ConnectionPoint.cs"><code>public class ConnectionPoint
{
    public string id;
    
    [XmlIgnore] public Rect rect;

    [XmlIgnore] public ConnectionPointType type;

    [XmlIgnore] public Node node;

    [XmlIgnore] public GUIStyle style;

    [XmlIgnore] public Action&lt;ConnectionPoint&gt; OnClickConnectionPoint;

    public ConnectionPoint() { }
    
    public ConnectionPoint(Node node, ConnectionPointType type, GUIStyle style, Action&lt;ConnectionPoint&gt; OnClickConnectionPoint, string id = null)
    {
        this.node = node;
        this.type = type;
        this.style = style;
        this.OnClickConnectionPoint = OnClickConnectionPoint;
        rect = new Rect(0, 0, 10f, 20f);

        this.id = id ?? Guid.NewGuid().ToString();
    }</code></pre>

<pre class="language-csharp  line-numbers " data-start="5" data-line="9" data-filename="Connection.cs"><code>public class Connection
{
    public ConnectionPoint inPoint;
    public ConnectionPoint outPoint;
    [XmlIgnore] public Action&lt;Connection&gt; OnClickRemoveConnection;</code></pre>

<pre class="language-csharp  line-numbers " data-start="5" data-line="13,14" data-filename="Node.cs"><code>public class Node
{
	public Rect rect;

	[XmlIgnore] public string title;
	[XmlIgnore] public bool isDragged;
	[XmlIgnore] public bool isSelected;

	public ConnectionPoint inPoint;
	public ConnectionPoint outPoint;

	[XmlIgnore] public GUIStyle style;
	[XmlIgnore] public GUIStyle defaultNodeStyle;
	[XmlIgnore] public GUIStyle selectedNodeStyle;

	[XmlIgnore] public Action&lt;Node&gt; OnRemoveNode;</code></pre>

<p>Of course, we need to update our <code>Save</code> method to include connections as well:</p>

<pre class="language-csharp  line-numbers " data-start="325" data-line="328" data-filename="NodeBasedEditor.cs"><code>    private void Save()
    {
        XMLOp.Serialize(nodes, &quot;Assets/Resources/nodes.xml&quot;);
        XMLOp.Serialize(connections, &quot;Assets/Resources/connections.xml&quot;);
    }</code></pre>

<p>This concludes the serialization (and frankly, the hard) part. Now we have an XML representation of the current state of our node based editor. All we have to do is convert it back.</p>

<h3 id="deserializing">Deserializing</h3>

<p>First things first: the Load button should be functional.</p>

<pre class="language-csharp  line-numbers " data-start="69" data-line="83-86" data-filename="NodeBasedEditor.cs"><code>    private void DrawMenuBar()
    {
        menuBar = new Rect(0, 0, position.width, menuBarHeight);

        GUILayout.BeginArea(menuBar, EditorStyles.toolbar);
        GUILayout.BeginHorizontal();

        if (GUILayout.Button(new GUIContent(&quot;Save&quot;), EditorStyles.toolbarButton, GUILayout.Width(35)))
        {
            Save();
        }
        
        GUILayout.Space(5);

        if (GUILayout.Button(new GUIContent(&quot;Load&quot;), EditorStyles.toolbarButton, GUILayout.Width(35)))
        {
            Load();
        }

        GUILayout.EndHorizontal();
        GUILayout.EndArea();
    }</code></pre>

<p>We are going to deserialize the contents of the XML files in <code>Load()</code> method, create nodes and connections and assign them to their respective properties. Deserializing the XML files is a pretty straightforward process; all we have to do is call <code>XMLOp.Deserialize&lt;T&gt;(string)</code>:</p>

<pre class="language-csharp  line-numbers " data-start="335" data-line="335-342" data-filename="NodeBasedEditor.cs"><code>    private void Load()
    {
        var nodesDeserialized = XMLOp.Deserialize&lt;List&lt;Node&gt;&gt;(&quot;Assets/Resources/nodes.xml&quot;);
        var connectionsDeserialized = XMLOp.Deserialize&lt;List&lt;Connection&gt;&gt;(&quot;Assets/Resources/connections.xml&quot;);

        nodes = new List&lt;Node&gt;();
        connections = new List&lt;Connection&gt;();
    }</code></pre>

<p>However, deserializing the XML files alone is not enough to restore our editor to its last state, because as you can see in the figure above, we broke the relation between the nodes and connections while serializing and we need to reconnect them. This reconnection process requires finding nodes by IDs and creating a connection between them. This is why we added unique IDs to our <code>ConnectionPoint</code> class. We need to recreate the <code>ConnectionPoint</code>s with those IDs, so we are going to add another constructor to Node class:</p>

<pre class="language-csharp  line-numbers " data-start="24" data-line="25,29,30" data-filename="Node.cs"><code>    public Node(Vector2 position, float width, float height, GUIStyle nodeStyle, GUIStyle selectedStyle, GUIStyle inPointStyle, GUIStyle outPointStyle, Action&lt;ConnectionPoint&gt; OnClickInPoint,
		Action&lt;ConnectionPoint&gt; OnClickOutPoint, Action&lt;Node&gt; OnClickRemoveNode, string inPointID, string outPointID)
	{
		rect = new Rect(position.x, position.y, width, height);
		style = nodeStyle;
		inPoint = new ConnectionPoint(this, ConnectionPointType.In, inPointStyle, OnClickInPoint, inPointID);
		outPoint = new ConnectionPoint(this, ConnectionPointType.Out, outPointStyle, OnClickOutPoint, outPointID);
		defaultNodeStyle = nodeStyle;
		selectedNodeStyle = selectedStyle;
		OnRemoveNode = OnClickRemoveNode;
	}</code></pre>

<p>This is a new constructor, and it will create a <code>Node</code> with two <code>ConnectionPoints</code> with given (instead of generated) IDs. Now we are going to create new nodes based on deserialized nodes:</p>

<pre class="language-csharp  line-numbers " data-start="335" data-line="343-360" data-filename="NodeBasedEditor.cs"><code>    private void Load()
    {
        var nodesDeserialized = XMLOp.Deserialize&lt;List&lt;Node&gt;&gt;(&quot;Assets/Resources/nodes.xml&quot;);
        var connectionsDeserialized = XMLOp.Deserialize&lt;List&lt;Connection&gt;&gt;(&quot;Assets/Resources/connections.xml&quot;);

        nodes = new List&lt;Node&gt;();
        connections = new List&lt;Connection&gt;();

        foreach (var nodeDeserialized in nodesDeserialized)
        {
            nodes.Add(new Node(
                nodeDeserialized.rect.position, 
                nodeDeserialized.rect.width, 
                nodeDeserialized.rect.height, 
                nodeStyle, 
                selectedNodeStyle, 
                inPointStyle, 
                outPointStyle, 
                OnClickInPoint, 
                OnClickOutPoint, 
                OnClickRemoveNode,
                nodeDeserialized.inPoint.id,
                nodeDeserialized.outPoint.id
                )
            );
        }
    }</code></pre>

<p>Go ahead and try it. Create a couple of nodes, save it, close the editor, open it again and hit the Load button. You’ll see that your nodes return back to their positions. Let’s deserialize connections and finalize our node based editor:</p>

<pre class="language-csharp  line-numbers " data-start="335" data-line="362-367" data-filename="NodeBasedEditor.cs"><code>    private void Load()
    {
        var nodesDeserialized = XMLOp.Deserialize&lt;List&lt;Node&gt;&gt;(&quot;Assets/Resources/nodes.xml&quot;);
        var connectionsDeserialized = XMLOp.Deserialize&lt;List&lt;Connection&gt;&gt;(&quot;Assets/Resources/connections.xml&quot;);

        nodes = new List&lt;Node&gt;();
        connections = new List&lt;Connection&gt;();

        foreach (var nodeDeserialized in nodesDeserialized)
        {
            nodes.Add(new Node(
                nodeDeserialized.rect.position, 
                nodeDeserialized.rect.width, 
                nodeDeserialized.rect.height, 
                nodeStyle, 
                selectedNodeStyle, 
                inPointStyle, 
                outPointStyle, 
                OnClickInPoint, 
                OnClickOutPoint, 
                OnClickRemoveNode,
                nodeDeserialized.inPoint.id,
                nodeDeserialized.outPoint.id
                )
            );
        }

        foreach (var connectionDeserialized in connectionsDeserialized)
        {
            var inPoint = nodes.First(n =&gt; n.inPoint.id == connectionDeserialized.inPoint.id).inPoint;
            var outPoint = nodes.First(n =&gt; n.outPoint.id == connectionDeserialized.outPoint.id).outPoint;
            connections.Add(new Connection(inPoint, outPoint, OnClickRemoveConnection));
        }
    }</code></pre>

<h3 id="last-words">Last Words</h3>

<p>This concludes our tutorial on serializing a node based editor. You now have a fully functioning node based editor with save and load features. If you have any questions or feedback, leave a comment.</p>

<p>As always, <a href="https://github.com/oguzkonya/post--serializing-node-based-editor-unity">here</a> are the scripts in full. Until next time.</p>]]></content><author><name>Oguz Konya</name></author><category term="unity" /><category term="unity-editor" /><category term="serialization" /><summary type="html"><![CDATA[I actually don’t get a lot of feedback on my posts, but one post stood out: Creating a Node Based Editor in Unity. Some people asked for a more advanced version and some asked how they can save and load data to the editor. I can make an advanced version, but it probably wouldn’t cover all usage cases. On the other hand, serializing (and deserializing) a node list is a more common problem. Although I addressed some issues in XML Serialization in Unity post, I would like to complete the node based editor by adding save and load features in this post.]]></summary></entry><entry><title type="html">XML Serialization in Unity</title><link href="https://oguzkonya.com/xml-serialization-and-deserialization-in-unity/" rel="alternate" type="text/html" title="XML Serialization in Unity" /><published>2019-08-22T00:00:00+00:00</published><updated>2019-08-22T00:00:00+00:00</updated><id>https://oguzkonya.com/xml-serialization-and-deserialization-in-unity</id><content type="html" xml:base="https://oguzkonya.com/xml-serialization-and-deserialization-in-unity/"><![CDATA[<p>Unity stores contents of a scene in a custom YAML file called a <strong>Unity scene file</strong>. While this is convenient for levels which are designed in Unity’s scene editor, it is not very useful for levels which are built at runtime. Moreover, it is not possible to store game related data in scene files, such as properties of weapons, cars, NPCs, etc. (actually, it is possible, but not feasible). Even though there are a few solutions for that kind of data storage in Unity, such as JSON, or SQL, the easiest of them to implement is XML. In this post, I will show you how to store your game data in XML files and read them at runtime.</p>

<p>To be able to save data in XML files, first we need to be able to convert objects into XML format and then convert XML format back into objects. This process is called <abbr title="Converting objects into a form (such as JSON, or XML) that can be easily transported.">serialization</abbr> and <abbr title="Creating objects from transport formats such as JSON, or XML.">deserialization</abbr>. C# already has great tools for XML <abbr title="Converting objects into a form (such as JSON, or XML) that can be easily transported.">serialization</abbr>, and we will build upon them to create XML serializer we need.</p>

<p>First, let’s create a sample class to start serializing:</p>

<pre class="language-csharp  line-numbers " data-filename="Hero.cs"><code>public class Hero
{
    public string name;

    public bool isBoss;

    public int hitPoints;

    public float baseDamage;
}</code></pre>

<p>This is a very basic version of a <code>Hero</code> class that you might find yourself creating for your game. You may think that it is <em>too</em> basic, but don’t worry, we will be adding features as we move on. However, before moving on, you should know two important key points about XML serializing:</p>

<ol>
  <li>XML serializer can only serialize public fields.</li>
  <li>Class to be serialized should have a parameterless constructor.</li>
</ol>

<p>In our case, <code>Hero</code> class already has nothing but public fields and since there isn’t any kind of constructor, it implicitly has a parameterless default constructor.</p>

<p>Let’s say we want this class to output an XML file just like the following:</p>
<pre class="language-xml  line-numbers " data-filename="hero.xml"><code>&lt;Hero&gt;
    &lt;name&gt;&lt;/name&gt;
    &lt;isBoss&gt;&lt;/isBoss&gt;
    &lt;hitPoints&gt;&lt;/hitPoints&gt;
    &lt;baseDamage&gt;&lt;/baseDamage&gt;
&lt;/Hero&gt;</code></pre>

<p>Generally, producing an XML file in a certain format requires some modification to target class. But, in our case we are not looking for a specific format. All our fields we want to serialize are public and there is a default constructor, therefore, we can start creating the XML file:</p>

<pre class="language-csharp  line-numbers " data-filename="XMLSerializer.cs"><code>using UnityEngine;
using System.Xml.Serialization;
using System.IO;

public class XMLSerializer : MonoBehaviour 
{
    private void Start() 
    {
        Hero knight = new Hero();
        knight.name = &quot;Knight of Solamnia&quot;;
        knight.isBoss = true;
        knight.hitPoints = 100;
        knight.baseDamage = 50f;

        XmlSerializer serializer = new XmlSerializer(typeof(Hero));
        StreamWriter writer = new StreamWriter(&quot;hero.xml&quot;);
        serializer.Serialize(writer.BaseStream, knight);
        writer.Close();
    }
}</code></pre>

<p>Let’s have a look at this code line by line:</p>

<p>On <strong>Line 9-13</strong>, we create a new <code>Hero</code> and assign its <abbr title="A method to associate declarative information with the code">attributes</abbr>.</p>

<p>On <strong>Line 15</strong>, we create an <code>XmlSerializer</code> instance with type of <code>Hero</code>, since it is the type of the class we are serializing. This <code>XmlSerializer</code> is a C# class and it can be found under <code>System.Xml.Serialization</code>.</p>

<p>On <strong>Line 16</strong>, we create a <code>StreamWriter</code> instance which would create the XML file itself and do the actual writing. <code>StreamWriter</code> is also a C# class and it can be found under <code>System.IO</code></p>

<p>On <strong>Line 17</strong>, we tell the <code>XmlSerializer</code> to serialize knight (our <code>Hero</code>), and send it to a stream.</p>

<p>And finally, on <strong>Line 18</strong>, we tell writer to close streaming (i.e stop reading input and create the file).</p>

<p>When you drag&amp;drop this code on an empty game object in Unity and run it, you will see that a file named <code>hero.xml</code> is created in your Unity project folder and its contents hold Hero data:</p>

<pre class="language-xml  line-numbers " data-filename="hero.xml"><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
&lt;Hero xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns:xsd=&quot;http://www.w3.org/2001/XMLSchema&quot;&gt;
    &lt;name&gt;Knight of Solamnia&lt;/name&gt;
    &lt;isBoss&gt;true&lt;/isBoss&gt;
    &lt;hitPoints&gt;100&lt;/hitPoints&gt;
    &lt;baseDamage&gt;50&lt;/baseDamage&gt;
&lt;/Hero&gt;</code></pre>

<p>As you can see, creating an XML file required no more than a few lines of code. But, what if we want to have different tag names in the XML file? Or, to use XML <abbr title="A method to associate declarative information with the code">attributes</abbr> instead of XML elements to store data? Or, to use arrays in our class? To achieve these, we need to modify our base class by adding some XML <abbr title="A method to associate declarative information with the code">attributes</abbr> to our fields. But first, we should change something in our code. I like my code well organized and I favor OOP’s single responsibility principle, so I will move XML <abbr title="Converting objects into a form (such as JSON, or XML) that can be easily transported.">serialization</abbr> part into its own class. This way, we will be able to serialize any type of object with a single line of code:</p>

<pre class="language-csharp  line-numbers " data-filename="XMLOp.cs"><code>using System.IO;
using System.Xml.Serialization;

public class XMLOp
{
    public static void Serialize(object item, string path)
    {
        XmlSerializer serializer = new XmlSerializer(item.GetType());
        StreamWriter writer = new StreamWriter(path);
        serializer.Serialize(writer.BaseStream, item);
        writer.Close();
    }
}</code></pre>

<p>Now our <code>XMLSerializer</code> looks like this:</p>

<pre class="language-csharp  line-numbers " data-filename="XMLSerializer.cs"><code>using UnityEngine;

public class XMLSerializer : MonoBehaviour
{
    private void Start()
    {
        Hero knight = new Hero();
        knight.name = &quot;Knight of Solamnia&quot;;
        knight.isBoss = true;
        knight.hitPoints = 100;
        knight.baseDamage = 50f;

        XMLOp.Serialize(knight, &quot;hero.xml&quot;);
    }
}</code></pre>

<h2 id="xml-serialization">XML Serialization</h2>

<p>As I have mentioned above, to change the behaviour of XML <abbr title="Converting objects into a form (such as JSON, or XML) that can be easily transported.">serialization</abbr>, we need to modify our class with XML <abbr title="A method to associate declarative information with the code">attributes</abbr>. As you can see <a href="https://msdn.microsoft.com/en-us/library/83y7df3e%28v=vs.110%29.aspx">here</a> there are many XML <abbr title="A method to associate declarative information with the code">attributes</abbr> that control <abbr title="Converting objects into a form (such as JSON, or XML) that can be easily transported.">serialization</abbr>, but in this post, I will only cover the following:</p>

<ul>
  <li>[XmlElement]</li>
  <li>[XmlAttribute]</li>
  <li>[XmlIgnore]</li>
  <li>[XmlRoot]</li>
  <li>[XmlArray]</li>
  <li>[XmlArrayItem]</li>
</ul>

<p>Usage of an XML attribute is very simple: you type the necessary attribute above your field or class just like the following:</p>

<pre class="language-csharp  line-numbers "><code>[XmlElement(&quot;Name&quot;)]
public string Name;</code></pre>

<h3 id="xmlelementstring">[XmlElement(String)]</h3>

<p>This attribute indicates that a field will be represented as an XML element. Fields of an object is serialized as XMLElement as default, so this attribute is necessary only to change the name of a field (or force an array to act like an element but we will get to that later). Let’s modify our script file and see what kind of XML file it produces:</p>

<pre class="language-csharp  line-numbers " data-filename="Hero.cs"><code>using System.Xml.Serialization;

public class Hero
{
    [XmlElement(&quot;n&quot;)]
    public string name;

    public bool isBoss;

    public int hitPoints;

    public float baseDamage;
}</code></pre>

<p>And the output becomes:</p>

<pre class="language-xml  line-numbers " data-filename="hero.xml"><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
&lt;Hero xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns:xsd=&quot;http://www.w3.org/2001/XMLSchema&quot;&gt;
    &lt;n&gt;Knight of Solamnia&lt;/n&gt;
    &lt;hitPoints&gt;100&lt;/hitPoints&gt;
    &lt;baseDamage&gt;50&lt;/baseDamage&gt;
    &lt;isBoss&gt;true&lt;/isBoss&gt;
&lt;/Hero&gt;</code></pre>

<p><strong>NOTE</strong>: XML <abbr title="A method to associate declarative information with the code">attributes</abbr> have more constructors with different signatures than this tutorial covers. For example, <code>XmlElement</code> also has <code>XmlElement(String, Type)</code> and <code>XmlElement(Type)</code>. However, since this tutorial is planned to be an introductory one, I am not going to cover them here.</p>

<h3 id="xmlattributestring">[XmlAttribute(String)]</h3>

<p>This attribute indicates that a field will be represented as an XML attribute.</p>

<pre class="language-csharp  line-numbers " data-filename="Hero.cs"><code>using System.Xml.Serialization;

public class Hero
{
    [XmlElement(&quot;n&quot;)]
    public string name;

    [XmlAttribute(&quot;boss&quot;)]
    public bool isBoss;

    public int hitPoints;

    public float baseDamage;
}</code></pre>

<p>And the output becomes:</p>

<pre class="language-xml  line-numbers " data-filename="hero.xml"><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
&lt;Hero xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns:xsd=&quot;http://www.w3.org/2001/XMLSchema&quot; boss=&quot;true&quot;&gt;
    &lt;n&gt;Knight of Solamnia&lt;/n&gt;
    &lt;hitPoints&gt;100&lt;/hitPoints&gt;
    &lt;baseDamage&gt;50&lt;/baseDamage&gt;
&lt;/Hero&gt;</code></pre>

<h3 id="xmlignore">[XmlIgnore]</h3>

<p>As I have mentioned before, a field must be public in order to be serialized. This also means that all the public fields will be serialized by the XML serializer. But sometimes, we might need a field to be <strong>not</strong> serialized without making it private. This is where <code>[XmlIgnore]</code> comes into play. It indicates that a field will not be represented in the XML file at all.</p>

<pre class="language-csharp  line-numbers " data-filename="Hero.cs"><code>using System.Xml.Serialization;

public class Hero
{
    [XmlElement(&quot;n&quot;)]
    public string name;

    [XmlAttribute(&quot;boss&quot;)]
    public bool isBoss;

    [XmlIgnore]
    public int hitPoints;

    public float baseDamage;
}</code></pre>

<p>And the output becomes:</p>

<pre class="language-xml  line-numbers " data-filename="hero.xml"><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
&lt;Hero xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns:xsd=&quot;http://www.w3.org/2001/XMLSchema&quot; boss=&quot;true&quot;&gt;
    &lt;n&gt;Knight of Solamnia&lt;/n&gt;
    &lt;baseDamage&gt;50&lt;/baseDamage&gt;
&lt;/Hero&gt;</code></pre>

<h3 id="xmlrootstring">[XmlRoot(String)]</h3>

<p>The object that is serialized by the XML serializer becomes the root of the XML file. As a result, object’s class name becomes the name of the root tag. Sometimes, we want to use some other name in order to provide clarification. This attribute indicates that the name of the root tag will be the provided string. It should be noted that <code>[XmlRoot]</code> attribute can only be used on classes, structs, enumerations or interfaces unlike the previous <abbr title="A method to associate declarative information with the code">attributes</abbr>.</p>

<pre class="language-csharp  line-numbers " data-filename="Hero.cs"><code>using System.Xml.Serialization;

[XmlRoot(&quot;Knight&quot;)]
public class Hero
{
    [XmlElement(&quot;n&quot;)]
    public string name;

    [XmlAttribute(&quot;boss&quot;)]
    public bool isBoss;

    [XmlIgnore]
    public int hitPoints;

    public float baseDamage;
}</code></pre>

<p>And the output becomes:</p>

<pre class="language-xml  line-numbers " data-filename="hero.xml"><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
&lt;Knight xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns:xsd=&quot;http://www.w3.org/2001/XMLSchema&quot; boss=&quot;true&quot;&gt;
    &lt;n&gt;Knight of Solamnia&lt;/n&gt;
    &lt;baseDamage&gt;50&lt;/baseDamage&gt;
&lt;/Knight&gt;</code></pre>

<h3 id="xmlarraystring-and-xmlarrayitemstring">[XmlArray(String)] and [XmlArrayItem(String)]</h3>
<p>But, how about arrays? What if our Hero has a int array which includes combo rewards?</p>

<pre class="language-csharp  line-numbers " data-filename="Hero.cs"><code>using System.Xml.Serialization;

public class Hero
{
    [XmlElement(&quot;n&quot;)]
    public string name;

    [XmlAttribute(&quot;boss&quot;)]
    public bool isBoss;

    [XmlIgnore]
    public int hitPoints;

    public float baseDamage;

    public int[] comboRewards;
}</code></pre>

<pre class="language-csharp  line-numbers " data-filename="XMLSerializer.cs"><code>using UnityEngine;

public class XMLSerializer : MonoBehaviour
{
    private void Start()
    {
        Hero knight = new Hero();
        knight.name = &quot;Knight of Solamnia&quot;;
        knight.isBoss = true;
        knight.hitPoints = 100;
        knight.baseDamage = 50f;
        knight.comboRewards = new int[] { 1, 3, 5 };

        XMLOp.Serialize(knight, &quot;hero.xml&quot;);
    }
}</code></pre>

<p>Output of this code would be:</p>

<pre class="language-csharp  line-numbers " data-filename="hero.xml"><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
&lt;Knight xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns:xsd=&quot;http://www.w3.org/2001/XMLSchema&quot; boss=&quot;true&quot;&gt;
    &lt;n&gt;Knight of Solamnia&lt;/n&gt;
    &lt;baseDamage&gt;50&lt;/baseDamage&gt;
    &lt;comboRewards&gt;
        &lt;int&gt;1&lt;/int&gt;
        &lt;int&gt;3&lt;/int&gt;
        &lt;int&gt;5&lt;/int&gt;
    &lt;/comboRewards&gt;
&lt;/Knight&gt;</code></pre>

<p><code>&lt;comboRewards&gt;</code> tag is OK, but those <code>&lt;int&gt;</code> tags don’t look nice, do they? Fortunately, there are two XML <abbr title="A method to associate declarative information with the code">attributes</abbr> which modify the XML output of an array: <code>[XmlArray(string)]</code> which modifies the name of the array, and <code>[XmlArrayItem(string)]</code> which, as you might have guessed, modifies the name of the array items.</p>

<pre class="language-csharp  line-numbers " data-filename="Hero.cs"><code>using System.Xml.Serialization;

public class Hero
{
    [XmlElement(&quot;n&quot;)]
    public string name;

    [XmlAttribute(&quot;boss&quot;)]
    public bool isBoss;

    [XmlIgnore]
    public int hitPoints;

    public float baseDamage;

    [XmlArray(&quot;rewards&quot;), XmlArrayItem(&quot;reward&quot;)]
    public int[] comboRewards;
}</code></pre>

<p>And this would produce a better output:</p>

<pre class="language-xml  line-numbers " data-filename="hero.xml"><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
&lt;Knight xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns:xsd=&quot;http://www.w3.org/2001/XMLSchema&quot; boss=&quot;true&quot;&gt;
    &lt;n&gt;Knight of Solamnia&lt;/n&gt;
    &lt;baseDamage&gt;50&lt;/baseDamage&gt;
    &lt;rewards&gt;
        &lt;reward&gt;1&lt;/reward&gt;
        &lt;reward&gt;3&lt;/reward&gt;
        &lt;reward&gt;5&lt;/reward&gt;
    &lt;/rewards&gt;
&lt;/Knight&gt;</code></pre>

<h2 id="xml-deserialization">XML Deserialization</h2>

<p>We have successfully saved our game data in an XML file, but currently it is pretty useless, because we can’t take that data back into our game. In order to do that, we need to read the XML file and create objects (namely, deserialize it). Deserialization is simpler than <abbr title="Converting objects into a form (such as JSON, or XML) that can be easily transported.">serialization</abbr>, because we already defined the structure in our class. All we need to do is just add a few lines of code to our <code>XMLOp.cs</code>:</p>

<pre class="language-csharp  line-numbers " data-filename="XMLOp.cs"><code>using System.IO;
using System.Xml.Serialization;

public class XMLOp
{
	public static void Serialize(object item, string path)
	{
		XmlSerializer serializer = new XmlSerializer(item.GetType());
		StreamWriter writer = new StreamWriter(path);
		serializer.Serialize(writer.BaseStream, item);
		writer.Close();
	}

	public static T Deserialize&lt;T&gt;(string path)
	{
		XmlSerializer serializer = new XmlSerializer(typeof(T));
		StreamReader reader = new StreamReader(path);
		T deserialized = (T)serializer.Deserialize(reader.BaseStream);
		reader.Close();
		return deserialized;
	}
}</code></pre>

<p>Deserialization process is very similar to <abbr title="Converting objects into a form (such as JSON, or XML) that can be easily transported.">serialization</abbr> process:</p>

<p>On <strong>Line 16</strong>, we create an <code>XmlSerializer</code> instance with type of T so that it can take any type to deserialize.</p>

<p>On <strong>Line 17</strong>, we create a <code>StreamReader</code> instance which would read the XML file.</p>

<p>On <strong>Line 18</strong>, we tell the <code>XmlSerializer</code> to deserialize the stream and cast it to our target type T.</p>

<p>On <strong>Line 19</strong>, we tell reader to close streaming and then on <strong>Line 20</strong> we return the deserialized object.</p>

<p>Let’s say, we have already serialized our weapon object and created the XML file. Now we can deserialize it in another script:</p>

<pre class="language-csharp  line-numbers " data-filename="XMLDeserializer.cs"><code>using UnityEngine;

public class XMLDeserializer : MonoBehaviour
{
    private void Start()
    {
        Hero hero = XMLOp.Deserialize&lt;Hero&gt;(&quot;hero.xml&quot;);
        Debug.Log(hero.name);
    }
}</code></pre>

<h2 id="conclusion">Conclusion</h2>
<p>This concludes our tutorial, and as you can see, XML <abbr title="Converting objects into a form (such as JSON, or XML) that can be easily transported.">serialization</abbr> in Unity (in C# actually) is pretty easy. All you have to do is to use XML <abbr title="A method to associate declarative information with the code">attributes</abbr> in your classes to modify <abbr title="Converting objects into a form (such as JSON, or XML) that can be easily transported.">serialization</abbr> behaviour.</p>

<p>As always, <a href="https://github.com/oguzkonya/post--xml-serialization-in-unity">here</a> are the scripts in full. Until next time.</p>]]></content><author><name>Oguz Konya</name></author><category term="unity" /><category term="serialization" /></entry><entry><title type="html">Creating a Node Based Editor in Unity</title><link href="https://oguzkonya.com/creating-node-based-editor-unity/" rel="alternate" type="text/html" title="Creating a Node Based Editor in Unity" /><published>2019-08-15T00:00:00+00:00</published><updated>2019-08-15T00:00:00+00:00</updated><id>https://oguzkonya.com/creating-node-based-editor-unity</id><content type="html" xml:base="https://oguzkonya.com/creating-node-based-editor-unity/"><![CDATA[<p>Node based editors are frequently used in game engines; Unity has Animator window, Unreal Engine has blueprint system, some other game engines have dialogue systems. In this blog post, we will create our own node based editor in Unity. It’s going to be simple node editor that you’ll be able to improve upon later (see the below image for an example). I am going to assume that you are already familiar with editor scripting, but if you are not, please take your time to have a look at <a href="/creating-editor-windows-in-unity/">this</a> post and <a href="/creating-clone-unitys-console-window/">this</a> post.</p>

<div class="img-wrapper">
    
    <a target="_blank" rel="noopener noreferrer" href="/assets/img/node-based-editor.gif">
    
        <img src="/assets/img/node-based-editor.gif" class="center" alt="Window" width="300px" />
    
    </a>
    
    <em>We will be creating this window in this post (click to see the gif in action)</em>
</div>

<h3 id="creating-the-window">Creating the Window</h3>

<p>Let’s start by creating a simple editor window. The structure of the code will be similar to that of the console clone we developed in the previous posts: draw the elements first, and then process input, and if the GUI is changed due to input events, force the window to repaint.</p>

<pre class="language-csharp  line-numbers " data-filename="NodeBasedEditor.cs"><code>using UnityEngine;
using UnityEditor;
using System.Collections.Generic;

public class NodeBasedEditor : EditorWindow
{
    [MenuItem(&quot;Window/Node Based Editor&quot;)]
    private static void OpenWindow()
    {
        NodeBasedEditor window = GetWindow&lt;NodeBasedEditor&gt;();
        window.titleContent = new GUIContent(&quot;Node Based Editor&quot;);
    }

    private void OnGUI()
    {
        DrawNodes();

        ProcessEvents(Event.current);

        if (GUI.changed) Repaint();
    }

    private void DrawNodes()
    {
    }

    private void ProcessEvents(Event e)
    {
    }
}</code></pre>

<h3 id="drawing-nodes">Drawing Nodes</h3>

<p>Well, since this is a node editor, it should contain a list of nodes, which requires us to define a <code>List&lt;Node&gt;</code>. But first we should define <code>Node</code> class. A <code>Node</code> will be responsible for drawing itself and processing its own events. Unlike <code>ProcessEvents(Event e)</code> in <code>NodeBasedEditor</code>, <code>ProcessEvents(Event e)</code> in <code>Node</code> will return a boolean so that we can check whether we should repaint the GUI or not.</p>

<pre class="language-csharp  line-numbers " data-filename="Node.cs"><code>using System;
using UnityEditor;
using UnityEngine;

public class Node
{
    public Rect rect;
    public string title;

    public GUIStyle style;

    public Node(Vector2 position, float width, float height, GUIStyle nodeStyle)
    {
        rect = new Rect(position.x, position.y, width, height);
        style = nodeStyle;
    }

    public void Drag(Vector2 delta)
    {
        rect.position += delta;
    }

    public void Draw()
    {
        GUI.Box(rect, title, style);
    }

    public bool ProcessEvents(Event e)
    {
        return false;
    }
}</code></pre>

<pre class="language-csharp  line-numbers " data-line="7,27-33" data-filename="NodeBasedEditor.cs"><code>using UnityEngine;
using UnityEditor;
using System.Collections.Generic;

public class NodeBasedEditor : EditorWindow
{
    private List&lt;Node&gt; nodes;

    [MenuItem(&quot;Window/Node Based Editor&quot;)]
    private static void OpenWindow()
    {
        NodeBasedEditor window = GetWindow&lt;NodeBasedEditor&gt;();
        window.titleContent = new GUIContent(&quot;Node Based Editor&quot;);
    }

    private void OnGUI()
    {
        DrawNodes();

        ProcessEvents(Event.current);

        if (GUI.changed) Repaint();
    }

    private void DrawNodes()
    {
        if (nodes != null)
        {
            for (int i = 0; i &lt; nodes.Count; i++)
            {
                nodes[i].Draw();
            }
        }
    }

    private void ProcessEvents(Event e)
    {
    }
}</code></pre>

<h3 id="creating-nodes">Creating Nodes</h3>

<p>Nodes are drawn in the editor now, but we can’t see them if we don’t create them. We should display a context menu with an “Add node” item when the user right clicks in the editor. When the user clicks “Add node”, we will create a <code>Node</code> and add it to the list of nodes, so that it is drawn. A <code>Node</code> requires a position, a width, a height and a styling; position will be the mouse’s current position, width will be 200, height will be 50 (yes, I don’t like using magic numbers in code, but this is going to be a simple editor, so the size doesn’t matter for the moment) and we will replicate the Animator window’s node style for styling.</p>

<pre class="language-csharp  line-numbers " data-line="9,18-23,47-55,58-63,65-73" data-filename="NodeBasedEditor.cs"><code>using UnityEngine;
using UnityEditor;
using System.Collections.Generic;

public class NodeBasedEditor : EditorWindow
{
    private List&lt;Node&gt; nodes;

    private GUIStyle nodeStyle;

    [MenuItem(&quot;Window/Node Based Editor&quot;)]
    private static void OpenWindow()
    {
        NodeBasedEditor window = GetWindow&lt;NodeBasedEditor&gt;();
        window.titleContent = new GUIContent(&quot;Node Based Editor&quot;);
    }

    private void OnEnable()
    {
        nodeStyle = new GUIStyle();
        nodeStyle.normal.background = EditorGUIUtility.Load(&quot;builtin skins/darkskin/images/node1.png&quot;) as Texture2D;
        nodeStyle.border = new RectOffset(12, 12, 12, 12);
    }

    private void OnGUI()
    {
        DrawNodes();

        ProcessEvents(Event.current);

        if (GUI.changed) Repaint();
    }

    private void DrawNodes()
    {
        if (nodes != null)
        {
            for (int i = 0; i &lt; nodes.Count; i++)
            {
                nodes[i].Draw();
            }
        }
    }

    private void ProcessEvents(Event e)
    {
        switch (e.type)
        {
            case EventType.MouseDown:
                if (e.button == 1)
                {
                    ProcessContextMenu(e.mousePosition);
                }
                break;
        }
    }

    private void ProcessContextMenu(Vector2 mousePosition)
    {
        GenericMenu genericMenu = new GenericMenu();
        genericMenu.AddItem(new GUIContent(&quot;Add node&quot;), false, () =&gt; OnClickAddNode(mousePosition)); 
        genericMenu.ShowAsContext();
    }

    private void OnClickAddNode(Vector2 mousePosition)
    {
        if (nodes == null)
        {
            nodes = new List&lt;Node&gt;();
        }

        nodes.Add(new Node(mousePosition, 200, 50, nodeStyle));
    }
}</code></pre>

<h3 id="making-nodes-draggable">Making Nodes Draggable</h3>

<p>Alright, now we are able to add nodes, but we can’t drag them around. As I mentioned earlier, nodes will be processing their own events, hence we will be handling drag event in <code>Node</code> class. One important thing to note here is that we should be “using” the drag event with <code>Use()</code> method. Later on, we will be adding canvas dragging, and we wouldn’t want to drag a node and the whole canvas at the same time (“using” an event prevents it being used by other processes, i.e. it stops event bubbling). Also note that the for loop in <code>ProcessNodeEvents(Event e)</code> traverses the node list backwards, because the last node is drawn at the top, so it should process the events first.</p>

<pre class="language-csharp  line-numbers " data-line="9,31-60" data-filename="Node.cs"><code>using System;
using UnityEditor;
using UnityEngine;

public class Node
{
    public Rect rect;
    public string title;
    public bool isDragged;

    public GUIStyle style;

    public Node(Vector2 position, float width, float height, GUIStyle nodeStyle)
    {
        rect = new Rect(position.x, position.y, width, height);
        style = nodeStyle;
    }

    public void Drag(Vector2 delta)
    {
        rect.position += delta;
    }

    public void Draw()
    {
        GUI.Box(rect, title, style);
    }

    public bool ProcessEvents(Event e)
    {
        switch (e.type)
        {
            case EventType.MouseDown:
                if (e.button == 0)
                {
                    if (rect.Contains(e.mousePosition))
                    {
                        isDragged = true;
                        GUI.changed = true;
                    }
                    else
                    {
                        GUI.changed = true;
                    }
                }
                break;

            case EventType.MouseUp:
                isDragged = false;
                break;

            case EventType.MouseDrag:
                if (e.button == 0 &amp;amp;&amp;amp; isDragged)
                {
                    Drag(e.delta);
                    e.Use();
                    return true;
                }
                break;
        }

        return false;
    }
}</code></pre>

<pre class="language-csharp  line-numbers " data-start="25" data-line="29,59-73" data-filename="NodeBasedEditor.cs"><code>    private void OnGUI()
    {
        DrawNodes();

        ProcessNodeEvents(Event.current);
        ProcessEvents(Event.current);

        if (GUI.changed) Repaint();
    }

    private void DrawNodes()
    {
        if (nodes != null)
        {
            for (int i = 0; i &lt; nodes.Count; i++)
            {
                nodes[i].Draw();
            }
        }
    }

    private void ProcessEvents(Event e)
    {
        switch (e.type)
        {
            case EventType.MouseDown:
                if (e.button == 1)
                {
                    ProcessContextMenu(e.mousePosition);
                }
                break;
        }
    }

    private void ProcessNodeEvents(Event e)
    {
        if (nodes != null)
        {
            for (int i = nodes.Count - 1; i &gt;= 0; i--)
            {
                bool guiChanged = nodes[i].ProcessEvents(e);

                if (guiChanged)
                {
                    GUI.changed = true;
                }
            }
        }
    }
	
    private void ProcessContextMenu(Vector2 mousePosition)
    {
        GenericMenu genericMenu = new GenericMenu();
        genericMenu.AddItem(new GUIContent(&quot;Add node&quot;), false, () =&gt; OnClickAddNode(mousePosition)); 
        genericMenu.ShowAsContext();
    }</code></pre>

<h3 id="creating-connections-between-nodes">Creating Connections Between Nodes</h3>

<p>Our node editor now has nodes, but we should also be able to connect them. In order to do this, we need two connection points (in and out) on a node and a connection between them. A connection point has a rectangle (so that we can draw it), has a type (in or out), has a style and it references its parent node. Therefore, our <code>ConnectionPoint</code> class will be a very simple one; drawing a button at a specific position and doing an action when this button is clicked.</p>

<p>On the other hand, a connection has two connection points and an action to remove it. <code>Connection</code> class is much simpler than <code>ConnectionPoint</code>, however, it introduces a new concept: <code>Handles</code>. This class is actually used to draw 3D GUI controls in the <strong>Scene</strong> view, but it is the only class with a bezier drawing method: <code>Handles.DrawBezier(Vector3, Vector3, Vector3, Vector3, Color, Texture2D, float)</code>. It takes 7 parameters and the first 4 parameters are the position controls (start position, end position, start tangent, and end tangent), while the rest determine how the bezier looks.</p>

<pre class="language-csharp  line-numbers " data-filename="ConnectionPoint.cs"><code>using System;
using UnityEngine;

public enum ConnectionPointType { In, Out }

public class ConnectionPoint
{
    public Rect rect;

    public ConnectionPointType type;

    public Node node;

    public GUIStyle style;

    public Action&lt;ConnectionPoint&gt; OnClickConnectionPoint;
    
    public ConnectionPoint(Node node, ConnectionPointType type, GUIStyle style, Action&lt;ConnectionPoint&gt; OnClickConnectionPoint)
    {
        this.node = node;
        this.type = type;
        this.style = style;
        this.OnClickConnectionPoint = OnClickConnectionPoint;
        rect = new Rect(0, 0, 10f, 20f);
    }

    public void Draw()
    {
        rect.y = node.rect.y + (node.rect.height * 0.5f) - rect.height * 0.5f;

        switch (type)
        {
            case ConnectionPointType.In:
                rect.x = node.rect.x - rect.width + 8f;
                break;

            case ConnectionPointType.Out:
                rect.x = node.rect.x + node.rect.width - 8f;
                break;
        }
        
        if (GUI.Button(rect, &quot;&quot;, style))
        {
            if (OnClickConnectionPoint != null)
            {
                OnClickConnectionPoint(this);
            }
        }
    }
}</code></pre>

<pre class="language-csharp  line-numbers " data-filename="Connection.cs"><code>using System;
using UnityEditor;
using UnityEngine;

public class Connection
{
    public ConnectionPoint inPoint;
    public ConnectionPoint outPoint;
    public Action&lt;Connection&gt; OnClickRemoveConnection;

    public Connection(ConnectionPoint inPoint, ConnectionPoint outPoint, Action&lt;Connection&gt; OnClickRemoveConnection)
    {
        this.inPoint = inPoint;
        this.outPoint = outPoint;
        this.OnClickRemoveConnection = OnClickRemoveConnection;
    }

    public void Draw()
    {
        Handles.DrawBezier(
            inPoint.rect.center,
            outPoint.rect.center,
            inPoint.rect.center + Vector2.left * 50f,
            outPoint.rect.center - Vector2.left * 50f,
            Color.white,
            null,
            2f
        );

        if (Handles.Button((inPoint.rect.center + outPoint.rect.center) * 0.5f, Quaternion.identity, 4, 8, Handles.RectangleCap))
        {
            if (OnClickRemoveConnection != null)
            {
                OnClickRemoveConnection(this);
            }
        }
    }
}</code></pre>

<h3 id="drawing-connections">Drawing Connections</h3>

<p>Since the <code>Connection</code> and <code>ConnectionPoint</code> classes are ready, all we have to do is draw connection points in <code>Node</code> class and draw connections in <code>NodeBasedEditor</code>. Changes in <code>Node</code> class will be minimal; we will define two connection points, modify the constructor so that we can pass the styling and actions for them, and draw them in <code>Draw()</code> method.</p>

<p>However, <code>NodeBasedEditor</code> needs significant modification. First of all, we need to define styles for connection points. You can use a single style for both of them, but I would like them to look different, so I will be using separate styles for each. We are going to initialize these styles in <code>OnEnable()</code> just like we initialized node style.</p>

<p>Secondly, we need to keep track of clicked connection points, so that when a user selects an <strong>in</strong> and <strong>out</strong>, we should create a connection between them. This step includes most of the additions:</p>

<ul>
  <li>OnClickInPoint(ConnectionPoint) handles clicking an <strong>in</strong> point.</li>
  <li>OnClickOutPoint(ConnectionPoint) handles clicking an <strong>out</strong> point.</li>
  <li>OnClickRemoveConnection(Connection) handles clicking the remove button on connections.</li>
  <li>CreateConnection() creates a connection when an <strong>in</strong> and an <strong>out</strong> point is selected.</li>
  <li>ClearConnectionSelection() clears selected points.</li>
</ul>

<p>And lastly, we need to draw connections in <code>OnGUI()</code> just like we draw nodes.</p>

<pre class="language-csharp  line-numbers " data-line="11,12,16,20,21,31,32" data-filename="Node.cs"><code>using System;
using UnityEditor;
using UnityEngine;

public class Node
{
    public Rect rect;
    public string title;
    public bool isDragged;

    public ConnectionPoint inPoint;
    public ConnectionPoint outPoint;

    public GUIStyle style;

    public Node(Vector2 position, float width, float height, GUIStyle nodeStyle, GUIStyle inPointStyle, GUIStyle outPointStyle, Action&lt;ConnectionPoint&gt; OnClickInPoint, Action&lt;ConnectionPoint&gt; OnClickOutPoint)
    {
        rect = new Rect(position.x, position.y, width, height);
        style = nodeStyle;
        inPoint = new ConnectionPoint(this, ConnectionPointType.In, inPointStyle, OnClickInPoint);
        outPoint = new ConnectionPoint(this, ConnectionPointType.Out, outPointStyle, OnClickOutPoint);
    }

    public void Drag(Vector2 delta)
    {
        rect.position += delta;
    }

    public void Draw()
    {
        inPoint.Draw();
        outPoint.Draw();
        GUI.Box(rect, title, style);
    }

    public bool ProcessEvents(Event e)
    {
        switch (e.type)
        {
            case EventType.MouseDown:
                if (e.button == 0)
                {
                    if (rect.Contains(e.mousePosition))
                    {
                        isDragged = true;
                        GUI.changed = true;
                    }
                    else
                    {
                        GUI.changed = true;
                    }
                }
                break;

            case EventType.MouseUp:
                isDragged = false;
                break;

            case EventType.MouseDrag:
                if (e.button == 0 &amp;amp;&amp;amp; isDragged)
                {
                    Drag(e.delta);
                    e.Use();
                    return true;
                }
                break;
        }

        return false;
    }
}</code></pre>

<pre class="language-csharp  line-numbers " data-line="8,11,12,14,15,30-38,44,63-72,122,125-141,143-159,161-164,166-174,176-180" data-filename="NodeBasedEditor.cs"><code>using UnityEngine;
using UnityEditor;
using System.Collections.Generic;

public class NodeBasedEditor : EditorWindow
{
    private List&lt;Node&gt; nodes;
    private List&lt;Connection&gt; connections;

    private GUIStyle nodeStyle;
    private GUIStyle inPointStyle;
    private GUIStyle outPointStyle;

    private ConnectionPoint selectedInPoint;
    private ConnectionPoint selectedOutPoint;

    [MenuItem(&quot;Window/Node Based Editor&quot;)]
    private static void OpenWindow()
    {
        NodeBasedEditor window = GetWindow&lt;NodeBasedEditor&gt;();
        window.titleContent = new GUIContent(&quot;Node Based Editor&quot;);
    }

    private void OnEnable()
    {
        nodeStyle = new GUIStyle();
        nodeStyle.normal.background = EditorGUIUtility.Load(&quot;builtin skins/darkskin/images/node1.png&quot;) as Texture2D;
        nodeStyle.border = new RectOffset(12, 12, 12, 12);
		
        inPointStyle = new GUIStyle();
        inPointStyle.normal.background = EditorGUIUtility.Load(&quot;builtin skins/darkskin/images/btn left.png&quot;) as Texture2D;
        inPointStyle.active.background = EditorGUIUtility.Load(&quot;builtin skins/darkskin/images/btn left on.png&quot;) as Texture2D;
        inPointStyle.border = new RectOffset(4, 4, 12, 12);

        outPointStyle = new GUIStyle();
        outPointStyle.normal.background = EditorGUIUtility.Load(&quot;builtin skins/darkskin/images/btn right.png&quot;) as Texture2D;
        outPointStyle.active.background = EditorGUIUtility.Load(&quot;builtin skins/darkskin/images/btn right on.png&quot;) as Texture2D;
        outPointStyle.border = new RectOffset(4, 4, 12, 12);
    }

    private void OnGUI()
    {
        DrawNodes();
        DrawConnections();

        ProcessNodeEvents(Event.current);
        ProcessEvents(Event.current);

        if (GUI.changed) Repaint();
    }

    private void DrawNodes()
    {
        if (nodes != null)
        {
            for (int i = 0; i &lt; nodes.Count; i++)
            {
                nodes[i].Draw();
            }
        }
    }

    private void DrawConnections()
    {
        if (connections != null)
        {
            for (int i = 0; i &lt; connections.Count; i++)
            {
                connections[i].Draw();
            } 
        }
    }

    private void ProcessEvents(Event e)
    {
        switch (e.type)
        {
            case EventType.MouseDown:
                if (e.button == 0)
                {
                    ClearConnectionSelection();
                }

                if (e.button == 1)
                {
                    ProcessContextMenu(e.mousePosition);
                }
                break;
        }
    }

    private void ProcessNodeEvents(Event e)
    {
        if (nodes != null)
        {
            for (int i = nodes.Count - 1; i &gt;= 0; i--)
            {
                bool guiChanged = nodes[i].ProcessEvents(e);

                if (guiChanged)
                {
                    GUI.changed = true;
                }
            }
        }
    }
	
    private void ProcessContextMenu(Vector2 mousePosition)
    {
        GenericMenu genericMenu = new GenericMenu();
        genericMenu.AddItem(new GUIContent(&quot;Add node&quot;), false, () =&gt; OnClickAddNode(mousePosition)); 
        genericMenu.ShowAsContext();
    }

    private void OnClickAddNode(Vector2 mousePosition)
    {
        if (nodes == null)
        {
            nodes = new List&lt;Node&gt;();
        }

        nodes.Add(new Node(mousePosition, 200, 50, nodeStyle, inPointStyle, outPointStyle, OnClickInPoint, OnClickOutPoint));
    }

    private void OnClickInPoint(ConnectionPoint inPoint)
    {
        selectedInPoint = inPoint;

        if (selectedOutPoint != null)
        {
            if (selectedOutPoint.node != selectedInPoint.node)
            {
                CreateConnection();
                ClearConnectionSelection(); 
            }
            else
            {
                ClearConnectionSelection();
            }
        }
    }

    private void OnClickOutPoint(ConnectionPoint outPoint)
    {
        selectedOutPoint = outPoint;

        if (selectedInPoint != null)
        {
            if (selectedOutPoint.node != selectedInPoint.node)
            {
                CreateConnection();
                ClearConnectionSelection();
            }
            else
            {
                ClearConnectionSelection();
            }
        }
    }

    private void OnClickRemoveConnection(Connection connection)
    {
        connections.Remove(connection);
    }

    private void CreateConnection()
    {
        if (connections == null)
        {
            connections = new List&lt;Connection&gt;();
        }

        connections.Add(new Connection(selectedInPoint, selectedOutPoint, OnClickRemoveConnection));
    }

    private void ClearConnectionSelection()
    {
        selectedInPoint = null;
        selectedOutPoint = null;
    }
}</code></pre>

<h3 id="selecting-nodes">Selecting Nodes</h3>

<p>We should provide feedback when the user clicks on a node so that they would know which node they selected (or if a node is selected at all). This is going to be useful when a user wants to remove a node.</p>

<pre class="language-csharp  line-numbers " data-line="10,15-17,19,25,26,52,53,58,59" data-filename="Node.cs"><code>using System;
using UnityEditor;
using UnityEngine;

public class Node
{
    public Rect rect;
    public string title;
    public bool isDragged;
    public bool isSelected;

    public ConnectionPoint inPoint;
    public ConnectionPoint outPoint;

    public GUIStyle style;
    public GUIStyle defaultNodeStyle;
    public GUIStyle selectedNodeStyle;

    public Node(Vector2 position, float width, float height, GUIStyle nodeStyle, GUIStyle selectedStyle, GUIStyle inPointStyle, GUIStyle outPointStyle, Action&lt;ConnectionPoint&gt; OnClickInPoint, Action&lt;ConnectionPoint&gt; OnClickOutPoint)
    {
        rect = new Rect(position.x, position.y, width, height);
        style = nodeStyle;
        inPoint = new ConnectionPoint(this, ConnectionPointType.In, inPointStyle, OnClickInPoint);
        outPoint = new ConnectionPoint(this, ConnectionPointType.Out, outPointStyle, OnClickOutPoint);
        defaultNodeStyle = nodeStyle;
        selectedNodeStyle = selectedStyle;
    }

    public void Drag(Vector2 delta)
    {
        rect.position += delta;
    }

    public void Draw()
    {
        inPoint.Draw();
        outPoint.Draw();
        GUI.Box(rect, title, style);
    }

    public bool ProcessEvents(Event e)
    {
        switch (e.type)
        {
            case EventType.MouseDown:
                if (e.button == 0)
                {
                    if (rect.Contains(e.mousePosition))
                    {
                        isDragged = true;
                        GUI.changed = true;
                        isSelected = true;
                        style = selectedNodeStyle;
                    }
                    else
                    {
                        GUI.changed = true;
                        isSelected = false;
                        style = defaultNodeStyle;
                    }
                }
                break;

            case EventType.MouseUp:
                isDragged = false;
                break;

            case EventType.MouseDrag:
                if (e.button == 0 &amp;amp;&amp;amp; isDragged)
                {
                    Drag(e.delta);
                    e.Use();
                    return true;
                }
                break;
        }

        return false;
    }
}</code></pre>

<pre class="language-csharp  line-numbers " data-line="11,31-33" data-filename="NodeBasedEditor.cs"><code>using UnityEngine;
using UnityEditor;
using System.Collections.Generic;

public class NodeBasedEditor : EditorWindow
{
    private List&lt;Node&gt; nodes;
    private List&lt;Connection&gt; connections;

    private GUIStyle nodeStyle;
    private GUIStyle selectedNodeStyle;
    private GUIStyle inPointStyle;
    private GUIStyle outPointStyle;

    private ConnectionPoint selectedInPoint;
    private ConnectionPoint selectedOutPoint;

    [MenuItem(&quot;Window/Node Based Editor&quot;)]
    private static void OpenWindow()
    {
        NodeBasedEditor window = GetWindow&lt;NodeBasedEditor&gt;();
        window.titleContent = new GUIContent(&quot;Node Based Editor&quot;);
    }

    private void OnEnable()
    {
        nodeStyle = new GUIStyle();
        nodeStyle.normal.background = EditorGUIUtility.Load(&quot;builtin skins/darkskin/images/node1.png&quot;) as Texture2D;
        nodeStyle.border = new RectOffset(12, 12, 12, 12);

        selectedNodeStyle = new GUIStyle();
        selectedNodeStyle.normal.background = EditorGUIUtility.Load(&quot;builtin skins/darkskin/images/node1 on.png&quot;) as Texture2D;
        selectedNodeStyle.border = new RectOffset(12, 12, 12, 12);

        inPointStyle = new GUIStyle();
        inPointStyle.normal.background = EditorGUIUtility.Load(&quot;builtin skins/darkskin/images/btn left.png&quot;) as Texture2D;
        inPointStyle.active.background = EditorGUIUtility.Load(&quot;builtin skins/darkskin/images/btn left on.png&quot;) as Texture2D;
        inPointStyle.border = new RectOffset(4, 4, 12, 12);

        outPointStyle = new GUIStyle();
        outPointStyle.normal.background = EditorGUIUtility.Load(&quot;builtin skins/darkskin/images/btn right.png&quot;) as Texture2D;
        outPointStyle.active.background = EditorGUIUtility.Load(&quot;builtin skins/darkskin/images/btn right on.png&quot;) as Texture2D;
        outPointStyle.border = new RectOffset(4, 4, 12, 12);
    }

    ...</code></pre>

<pre class="language-csharp  line-numbers " data-start="120" data-line="127" data-filename="NodeBasedEditor.cs"><code>    private void OnClickAddNode(Vector2 mousePosition)
    {
        if (nodes == null)
        {
            nodes = new List&lt;Node&gt;();
        }

        nodes.Add(new Node(mousePosition, 200, 50, nodeStyle, selectedNodeStyle, inPointStyle, outPointStyle, OnClickInPoint, OnClickOutPoint));
    }</code></pre>

<h3 id="removing-nodes">Removing Nodes</h3>

<p>Some node editors prefer to put the <strong>remove node</strong> button on the node itself, but in our case it might be dangerous: the user might remove a node accidentally. So, we are going to do the next best thing: put that button on a context menu. Users should select the node first and then right click on it in order to access the <strong>remove node</strong> button. When the user clicks <strong>remove node</strong>, we will remove the node from the nodes list. However, the node might have connections to other nodes, so we should remove those connections first.</p>

<pre class="language-csharp  line-numbers " data-line="19,21,29,66-70,90-103" data-filename="Node.cs"><code>using System;
using UnityEditor;
using UnityEngine;

public class Node
{
    public Rect rect;
    public string title;
    public bool isDragged;
    public bool isSelected;

    public ConnectionPoint inPoint;
    public ConnectionPoint outPoint;

    public GUIStyle style;
    public GUIStyle defaultNodeStyle;
    public GUIStyle selectedNodeStyle;

    public Action&lt;Node&gt; OnRemoveNode;

    public Node(Vector2 position, float width, float height, GUIStyle nodeStyle, GUIStyle selectedStyle, GUIStyle inPointStyle, GUIStyle outPointStyle, Action&lt;ConnectionPoint&gt; OnClickInPoint, Action&lt;ConnectionPoint&gt; OnClickOutPoint, Action&lt;Node&gt; OnClickRemoveNode)
    {
        rect = new Rect(position.x, position.y, width, height);
        style = nodeStyle;
        inPoint = new ConnectionPoint(this, ConnectionPointType.In, inPointStyle, OnClickInPoint);
        outPoint = new ConnectionPoint(this, ConnectionPointType.Out, outPointStyle, OnClickOutPoint);
        defaultNodeStyle = nodeStyle;
        selectedNodeStyle = selectedStyle;
        OnRemoveNode = OnClickRemoveNode;
    }

    public void Drag(Vector2 delta)
    {
        rect.position += delta;
    }

    public void Draw()
    {
        inPoint.Draw();
        outPoint.Draw();
        GUI.Box(rect, title, style);
    }

    public bool ProcessEvents(Event e)
    {
        switch (e.type)
        {
            case EventType.MouseDown:
                if (e.button == 0)
                {
                    if (rect.Contains(e.mousePosition))
                    {
                        isDragged = true;
                        GUI.changed = true;
                        isSelected = true;
                        style = selectedNodeStyle;
                    }
                    else
                    {
                        GUI.changed = true;
                        isSelected = false;
                        style = defaultNodeStyle;
                    }
                }

                if (e.button == 1 &amp;amp;&amp;amp; isSelected &amp;amp;&amp;amp; rect.Contains(e.mousePosition))
                {
                    ProcessContextMenu();
                    e.Use();
                }
                break;

            case EventType.MouseUp:
                isDragged = false;
                break;

            case EventType.MouseDrag:
                if (e.button == 0 &amp;amp;&amp;amp; isDragged)
                {
                    Drag(e.delta);
                    e.Use();
                    return true;
                }
                break;
        }

        return false;
    }

    private void ProcessContextMenu()
    {
        GenericMenu genericMenu = new GenericMenu();
        genericMenu.AddItem(new GUIContent(&quot;Remove node&quot;), false, OnClickRemoveNode);
        genericMenu.ShowAsContext();
    }

    private void OnClickRemoveNode()
    {
        if (OnRemoveNode != null)
        {
            OnRemoveNode(this);
        }
    }
}</code></pre>

<pre class="language-csharp  line-numbers " data-start="120" data-line="127" data-filename="NodeBasedEditor.cs"><code>    private void OnClickAddNode(Vector2 mousePosition)
    {
        if (nodes == null)
        {
            nodes = new List&lt;Node&gt;();
        }

        nodes.Add(new Node(mousePosition, 200, 50, nodeStyle, selectedNodeStyle, inPointStyle, outPointStyle, OnClickInPoint, OnClickOutPoint, OnClickRemoveNode));
    }</code></pre>

<pre class="language-csharp  line-numbers " data-start="166" data-line="166-189" data-filename="NodeBasedEditor.cs"><code>    private void OnClickRemoveNode(Node node)
    {
        if (connections != null)
        {
            List&lt;Connection&gt; connectionsToRemove = new List&lt;Connection&gt;();

            for (int i = 0; i &lt; connections.Count; i++)
            {
                if (connections[i].inPoint == node.inPoint || connections[i].outPoint == node.outPoint)
                {
                    connectionsToRemove.Add(connections[i]);
                }
            }

            for (int i = 0; i &lt; connectionsToRemove.Count; i++)
            {
                connections.Remove(connectionsToRemove[i]);
            }

            connectionsToRemove = null;
        }

        nodes.Remove(node);
    }</code></pre>

<h3 id="final-touches">Final Touches</h3>

<p>The node editor is complete at this point, but it lacks some important features which would elevate the user experience:</p>

<ul>
  <li>A draggable canvas,</li>
  <li>A bezier from selected connection point to the mouse position,</li>
  <li>A grid in the background.</li>
</ul>

<p>Making our canvas draggable is the easiest one, so let’s start with that. All we have to do is just apply mouse drag to every single node in the node list.</p>

<pre class="language-csharp  line-numbers " data-start="5" data-line="18" data-filename="NodeBasedEditor.cs"><code>public class NodeBasedEditor : EditorWindow
{
    private List&lt;Node&gt; nodes;
    private List&lt;Connection&gt; connections;

    private GUIStyle nodeStyle;
    private GUIStyle selectedNodeStyle;
    private GUIStyle inPointStyle;
    private GUIStyle outPointStyle;

    private ConnectionPoint selectedInPoint;
    private ConnectionPoint selectedOutPoint;
    
    private Vector2 drag;

    ...</code></pre>

<pre class="language-csharp  line-numbers " data-start="81" data-line="83,99-103" data-filename="NodeBasedEditor.cs"><code>    private void ProcessEvents(Event e)
    {
        drag = Vector2.zero;

        switch (e.type)
        {
            case EventType.MouseDown:
                if (e.button == 0)
                {
                    ClearConnectionSelection();
                }

                if (e.button == 1)
                {
                    ProcessContextMenu(e.mousePosition);
                }
            break;

            case EventType.MouseDrag:
                if (e.button == 0)
                {
                    OnDrag(e.delta);
                }
            break;
        }
    }</code></pre>

<pre class="language-csharp  line-numbers " data-start="131" data-line="131-144" data-filename="NodeBasedEditor.cs"><code>    private void OnDrag(Vector2 delta)
    {
        drag = delta;

        if (nodes != null)
        {
            for (int i = 0; i &lt; nodes.Count; i++)
            {
                nodes[i].Drag(delta);
            }
        }

        GUI.changed = true;
    }</code></pre>

<p>Next up, drawing the bezier from selected connection point to the mouse position. By drawing this bezier, we will let users know which connection point selected and how their connection will look like.</p>

<pre class="language-csharp  line-numbers " data-start="48" data-line="48-59" data-filename="NodeBasedEditor.cs"><code>    private void OnGUI()
    {
        DrawNodes();
        DrawConnections();

        DrawConnectionLine(Event.current);

        ProcessNodeEvents(Event.current);
        ProcessEvents(Event.current);

        if (GUI.changed) Repaint();
    }</code></pre>

<pre class="language-csharp  line-numbers " data-start="126" data-line="126-157" data-filename="NodeBasedEditor.cs"><code>    private void DrawConnectionLine(Event e)
    {
        if (selectedInPoint != null &amp;amp;&amp;amp; selectedOutPoint == null)
        {
            Handles.DrawBezier(
                selectedInPoint.rect.center,
                e.mousePosition,
                selectedInPoint.rect.center + Vector2.left * 50f,
                e.mousePosition - Vector2.left * 50f,
                Color.white,
                null,
                2f
            );

            GUI.changed = true;
        }

        if (selectedOutPoint != null &amp;amp;&amp;amp; selectedInPoint == null)
        {
            Handles.DrawBezier(
                selectedOutPoint.rect.center,
                e.mousePosition,
                selectedOutPoint.rect.center - Vector2.left * 50f,
                e.mousePosition + Vector2.left * 50f,
                Color.white,
                null,
                2f
            );

            GUI.changed = true;
        }
    }</code></pre>

<p>And finally, drawing the grid:</p>

<pre class="language-csharp  line-numbers " data-start="5" data-line="19" data-filename="NodeBasedEditor.cs"><code>public class NodeBasedEditor : EditorWindow
{
    private List&lt;Node&gt; nodes;
    private List&lt;Connection&gt; connections;

    private GUIStyle nodeStyle;
    private GUIStyle selectedNodeStyle;
    private GUIStyle inPointStyle;
    private GUIStyle outPointStyle;

    private ConnectionPoint selectedInPoint;
    private ConnectionPoint selectedOutPoint;

    private Vector2 offset;
    private Vector2 drag;

    ...</code></pre>

<pre class="language-csharp  line-numbers " data-start="49" data-line="51,52,65-88" data-filename="NodeBasedEditor.cs"><code>    private void OnGUI()
    {
        DrawGrid(20, 0.2f, Color.gray);
        DrawGrid(100, 0.4f, Color.gray);

        DrawNodes();
        DrawConnections();

        DrawConnectionLine(Event.current);

        ProcessNodeEvents(Event.current);
        ProcessEvents(Event.current);

        if (GUI.changed) Repaint();
    }

    private void DrawGrid(float gridSpacing, float gridOpacity, Color gridColor)
    {
        int widthDivs = Mathf.CeilToInt(position.width / gridSpacing);
        int heightDivs = Mathf.CeilToInt(position.height / gridSpacing);

        Handles.BeginGUI();
        Handles.color = new Color(gridColor.r, gridColor.g, gridColor.b, gridOpacity);

        offset += drag * 0.5f;
        Vector3 newOffset = new Vector3(offset.x % gridSpacing, offset.y % gridSpacing, 0);

        for (int i = 0; i &lt; widthDivs; i++)
        {
            Handles.DrawLine(new Vector3(gridSpacing * i, -gridSpacing, 0) + newOffset, new Vector3(gridSpacing * i, position.height, 0f) + newOffset);
        }

        for (int j = 0; j &lt; heightDivs; j++)
        {
            Handles.DrawLine(new Vector3(-gridSpacing, gridSpacing * j, 0) + newOffset, new Vector3(position.width, gridSpacing * j, 0f) + newOffset);
        }

        Handles.color = Color.white;
        Handles.EndGUI();
    }</code></pre>

<h3 id="conclusion">Conclusion</h3>

<p>This concludes our tutorial and to be frank, our node editor looks like any first grade node editor you can find on the Asset Store. From this point on, you can work on it and create your own custom node editor. Here is a quest editor I built while working on a prototype:</p>

<div class="img-wrapper">
    
        <img src="/assets/img/sample-node-based-editor.png" class="center" alt="Sample Node Based Editor" width="400px" />
    
    <div class="empty-caption"></div>
</div>

<p>And as always, <a href="https://github.com/oguzkonya/post--creating-node-based-editor">here</a> is the script in full. Until next time.</p>]]></content><author><name>Oguz Konya</name></author><category term="unity" /><category term="unity-editor" /><summary type="html"><![CDATA[Node based editors are frequently used in game engines; Unity has Animator window, Unreal Engine has blueprint system, some other game engines have dialogue systems. In this blog post, we will create our own node based editor in Unity. It’s going to be simple node editor that you’ll be able to improve upon later (see the below image for an example). I am going to assume that you are already familiar with editor scripting, but if you are not, please take your time to have a look at this post and this post.]]></summary></entry><entry><title type="html">Creating a Clone of Unity’s Console Window</title><link href="https://oguzkonya.com/creating-clone-unitys-console-window/" rel="alternate" type="text/html" title="Creating a Clone of Unity’s Console Window" /><published>2019-08-08T00:00:00+00:00</published><updated>2019-08-08T00:00:00+00:00</updated><id>https://oguzkonya.com/creating-clone-unitys-console-window</id><content type="html" xml:base="https://oguzkonya.com/creating-clone-unitys-console-window/"><![CDATA[<p>In our last <a href="/creating-editor-windows-in-unity/">post</a> we created a Unity window and added two resizable panels. In this post, we will improve upon it and make it a clone of Unity’s console window. This post is going to be a little bit longer, so I will omit the previously written code, but the final version will still be available in full at the end.</p>

<p>Before we start coding, let’s examine the console window and see what we should add.</p>

<div class="img-wrapper">
    
        <img src="/assets/img/unity-console-window.png" class="center" alt="Unity's console window" width="400px" />
    
    <div class="empty-caption"></div>
</div>

<p>The window starts with a menu bar (1) which has one button and six toggles. The button and three toggles are aligned to left, and the remaining toggles are aligned to right. The button clears the window, while toggles turn on and off specific options. Then there is a scroll view (2) that contains clickable boxes with icons and text. Boxes change color when you click on them, and their content is displayed in the bottom panel (3), a text area which is not editable but selectable.</p>

<p>Alright then, we can start. But, before we do, I would like to fix a tiny issue from the previous post’s code. I left a magic number as the height of the resizer area, and I would like to convert it to a proper variable:</p>

<pre class="language-csharp  line-numbers " data-start="6" data-line="13" data-filename="ResizablePanels.cs"><code>    private Rect upperPanel;
    private Rect lowerPanel; 
    private Rect resizer; 

    private float sizeRatio = 0.5f; 
    private bool isResizing; 

    private float resizerHeight = 5f; 

    private GUIStyle resizerStyle;</code></pre>

<p>And, further down the code, once again replace the magic number with the variable:</p>

<pre class="language-csharp  line-numbers " data-start="50" data-line="52,61,63"><code>    private void DrawLowerPanel()
    {
        lowerPanel = new Rect(0, (position.height * sizeRatio) + resizerHeight, position.width, (position.height * (1 - sizeRatio)) - resizerHeight);

        GUILayout.BeginArea(lowerPanel);
        GUILayout.Label(&quot;Lower Panel&quot;);
        GUILayout.EndArea();
    }

    private void DrawResizer()
    {
        resizer = new Rect(0, (position.height * sizeRatio) - resizerHeight, position.width, resizerHeight * 2);

        GUILayout.BeginArea(new Rect(resizer.position + (Vector2.up * resizerHeight), new Vector2(position.width, 2)), resizerStyle);
        GUILayout.EndArea();

        EditorGUIUtility.AddCursorRect(resizer, MouseCursor.ResizeVertical);
    }</code></pre>

<h3 id="menu-bar">Menu Bar</h3>

<p>Now we can start adding our menu bar. We will draw this bar just as we drew other panels: by feeding <code>GUILayout.BeginArea()</code> a rectangle which would define its position and size (basically, its area). I am going to steal this area  from the upper panel, so that we won’t have to change other panels’ positions or heights. You can make this bar as tall as you would like, but since we are cloning Unity’s console window, we should stick to default and make it 20 pixels in height. Also, please note that this time, <code>GUILayout.BeginArea()</code> takes a second parameter: <code>EditorStyles.toolbar</code>. As the name suggests, this parameter tells Unity to draw this area in toolbar style. <code>EditorStyles</code> has many other options to choose from which affects how the GUI elements are displayed, so I would suggest checking them out and see Unity team used them in their own editor windows.</p>

<pre class="language-csharp  line-numbers " data-start="6" data-line="9,15"><code>    private Rect upperPanel;
    private Rect lowerPanel; 
    private Rect resizer; 
    private Rect menuBar;

    private float sizeRatio = 0.5f; 
    private bool isResizing; 

    private float resizerHeight = 5f; 
    private float menuBarHeight = 20f;

    private GUIStyle resizerStyle;</code></pre>

<pre class="language-csharp  line-numbers " data-start="32" data-line="34,44-50,54"><code>    private void OnGUI()
    {
        DrawMenuBar();
        DrawUpperPanel();
        DrawLowerPanel();
        DrawResizer();

        ProcessEvents(Event.current);
        
        if (GUI.changed) Repaint();
    }

    private void DrawMenuBar()
    {
        menuBar = new Rect(0, 0, position.width, menuBarHeight);

        GUILayout.BeginArea(menuBar, EditorStyles.toolbar);
        GUILayout.EndArea();
    }

    private void DrawUpperPanel()
    {
        upperPanel = new Rect(0, menuBarHeight, position.width, (position.height * sizeRatio) - menuBarHeight);

        GUILayout.BeginArea(upperPanel);
        GUILayout.Label(&quot;Upper Panel&quot;);
        GUILayout.EndArea();
    }</code></pre>

<p>OK, we are ready to add our buttons and toggles. I could have added them in the code above, but there are a couple of new concepts that I should explain beforehand. First of all, there is <code>GUILayout.BeginHorizontal()</code>. You see, <code>GUILayout</code>, as the name suggests, lays out the GUI automatically <strong>vertically</strong>. However, a toolbar is laid out horizontally, so we need to use <code>GUILayout.BeginHorizontal()</code> and then use <code>GUILayout.EndHorizontal()</code> so that Unity stops horizontal layout and continues automatic vertical layout. Then, there is <code>GUILayout.FlexibleSpace()</code> which acts like a spring and pushes other UI elements to the edges of its container by filling the space between them. On the other hand, <code>GUILayout.Space(int)</code> creates just the amount of space you need. <code>GUILayout.Button()</code> returns true when it is clicked and <code>GUILayout.Toggle()</code> returns a boolean depending on the status of the toggle: true when it is on and false when it is off.</p>

<pre class="language-csharp  line-numbers " data-start="14" data-line="17-22"><code>    private float resizerHeight = 5f;
    private float menuBarHeight = 20f;

    private bool collapse = false;
    private bool clearOnPlay = false;
    private bool errorPause = false;
    private bool showLog = false;
    private bool showWarnings = false;
    private bool showErrors = false;

    private GUIStyle resizerStyle;</code></pre>

<pre class="language-csharp  line-numbers " data-start="51" data-line="56-71"><code>    private void DrawMenuBar()
    {
        menuBar = new Rect(0, 0, position.width, menuBarHeight);

        GUILayout.BeginArea(menuBar, EditorStyles.toolbar);
        GUILayout.BeginHorizontal();

        GUILayout.Button(new GUIContent(&quot;Clear&quot;), EditorStyles.toolbarButton, GUILayout.Width(35));
        GUILayout.Space(5);

        collapse = GUILayout.Toggle(collapse, new GUIContent(&quot;Collapse&quot;), EditorStyles.toolbarButton, GUILayout.Width(50));
        clearOnPlay = GUILayout.Toggle(clearOnPlay, new GUIContent(&quot;Clear On Play&quot;), EditorStyles.toolbarButton, GUILayout.Width(70));
        errorPause = GUILayout.Toggle(errorPause, new GUIContent(&quot;Error Pause&quot;), EditorStyles.toolbarButton, GUILayout.Width(60));

        GUILayout.FlexibleSpace();

        showLog = GUILayout.Toggle(showLog, new GUIContent(&quot;L&quot;), EditorStyles.toolbarButton, GUILayout.Width(30));
        showWarnings = GUILayout.Toggle(showWarnings, new GUIContent(&quot;W&quot;), EditorStyles.toolbarButton, GUILayout.Width(30));
        showErrors = GUILayout.Toggle(showErrors, new GUIContent(&quot;E&quot;), EditorStyles.toolbarButton, GUILayout.Width(30));

        GUILayout.EndHorizontal();
        GUILayout.EndArea();
    }</code></pre>

<p>It looks pretty good, but the toggles on the right are missing their icons. Adding icons and textures to GUI elements is rather easy, but Unity lacks the documentation on how to do it. Here’s a piece of information you probably can’t find on the internet: Unity uses <code>EditorGUIUtility.Load(string)</code> to load editor resources and <a href="https://gist.github.com/masa795/5797164">this</a> piece of script lists some of the default Unity editor textures (all the icons). I checked the list and found the icons used in the console editor, so let’s add them into our own clone.</p>

<pre class="language-csharp  line-numbers " data-start="24" data-line="26-31"><code>    private GUIStyle resizerStyle;

    private Texture2D errorIcon;
    private Texture2D errorIconSmall;
    private Texture2D warningIcon;
    private Texture2D warningIconSmall;
    private Texture2D infoIcon;
    private Texture2D infoIconSmall;</code></pre>

<pre class="language-csharp  line-numbers " data-start="40" data-line="42-48"><code>    private void OnEnable()
    {
        errorIcon = EditorGUIUtility.Load(&quot;icons/console.erroricon.png&quot;) as Texture2D;
        warningIcon = EditorGUIUtility.Load(&quot;icons/console.warnicon.png&quot;) as Texture2D;
        infoIcon = EditorGUIUtility.Load(&quot;icons/console.infoicon.png&quot;) as Texture2D;

        errorIconSmall = EditorGUIUtility.Load(&quot;icons/console.erroricon.sml.png&quot;) as Texture2D;
        warningIconSmall = EditorGUIUtility.Load(&quot;icons/console.warnicon.sml.png&quot;) as Texture2D;
        infoIconSmall = EditorGUIUtility.Load(&quot;icons/console.infoicon.sml.png&quot;) as Texture2D;

        resizerStyle = new GUIStyle();
        resizerStyle.normal.background = EditorGUIUtility.Load(&quot;icons/d_AvatarBlendBackground.png&quot;) as Texture2D;
    }</code></pre>

<pre class="language-csharp  line-numbers " data-start="66" data-line="82-84"><code>    private void DrawMenuBar()
    {
        menuBar = new Rect(0, 0, position.width, menuBarHeight);

        GUILayout.BeginArea(menuBar, EditorStyles.toolbar);
        GUILayout.BeginHorizontal();

        GUILayout.Button(new GUIContent(&quot;Clear&quot;), EditorStyles.toolbarButton, GUILayout.Width(35));
        GUILayout.Space(5);

        collapse = GUILayout.Toggle(collapse, new GUIContent(&quot;Collapse&quot;), EditorStyles.toolbarButton, GUILayout.Width(50));
        clearOnPlay = GUILayout.Toggle(clearOnPlay, new GUIContent(&quot;Clear On Play&quot;), EditorStyles.toolbarButton, GUILayout.Width(70));
        errorPause = GUILayout.Toggle(errorPause, new GUIContent(&quot;Error Pause&quot;), EditorStyles.toolbarButton, GUILayout.Width(60));

        GUILayout.FlexibleSpace();

        showLog = GUILayout.Toggle(showLog, new GUIContent(&quot;L&quot;, infoIconSmall), EditorStyles.toolbarButton, GUILayout.Width(30));
        showWarnings = GUILayout.Toggle(showWarnings, new GUIContent(&quot;W&quot;, warningIconSmall), EditorStyles.toolbarButton, GUILayout.Width(30));
        showErrors = GUILayout.Toggle(showErrors, new GUIContent(&quot;E&quot;, errorIconSmall), EditorStyles.toolbarButton, GUILayout.Width(30));

        GUILayout.EndHorizontal();
        GUILayout.EndArea();
    }</code></pre>

<p>It definitely looks like a clone of the console window, right? :)</p>

<div class="img-wrapper">
    
        <img src="/assets/img/resizable-panels.png" class="center" alt="Resizable Panels" width="400px" />
    
    <div class="empty-caption"></div>
</div>

<h3 id="upper-panel">Upper Panel</h3>

<p>Let’s move on to the upper panel. This panel should be scrollable, because it could contain more content than it can display. Here is another new concept: <code>GUILayout.BeginScrollView(Vector2 scroll)</code> creates a scroll view in the area it is defined. All the GUI elements between <code>GUILayout.BeginScrollView(Vector2 scroll)</code> and <code>GUILayout.EndScrollView()</code> will be displayed in this scroll area.</p>

<pre class="language-csharp  line-numbers " data-start="24" data-line="24"><code>    private Vector2 upperPanelScroll;

    private GUIStyle resizerStyle;

    private Texture2D errorIcon;
    private Texture2D errorIconSmall;
    private Texture2D warningIcon;
    private Texture2D warningIconSmall;
    private Texture2D infoIcon;
    private Texture2D infoIconSmall;</code></pre>

<pre class="language-csharp  line-numbers " data-start="92" data-line="97-99"><code>    private void DrawUpperPanel()
    {
        upperPanel = new Rect(0, menuBarHeight, position.width, (position.height * sizeRatio) - menuBarHeight);

        GUILayout.BeginArea(upperPanel);
        upperPanelScroll = GUILayout.BeginScrollView(upperPanelScroll);

        GUILayout.EndScrollView();
        GUILayout.EndArea();
    }</code></pre>

<p>Unity’s console window displays boxes in this panel, so will we. However, it is not going to be one liner, because we need to know what kind of content needs to be displayed (info, warning or error), and what its index number is (so that we can do a zebra effect on the boxes). For these reasons, it is going to be a little more work than we did previously. First of all, we need an <strong>enum</strong> for the content type of the box, which fortunately exists: <code>LogType</code>. Then, we should create a method for drawing boxes. This method will draw a box, add an icon to the left of the content based on its type, set the background color to a lighter or darker color based on its index (lighter if the index is odd, darker if the index is even) and then display a text.</p>

<pre class="language-csharp  line-numbers " data-start="24" data-line="27,29-32"><code>    private Vector2 upperPanelScroll;

    private GUIStyle resizerStyle;
    private GUIStyle boxStyle;

    private Texture2D boxBgOdd;
    private Texture2D boxBgEven;
    private Texture2D boxBgSelected;
    private Texture2D icon;
    private Texture2D errorIcon;
    private Texture2D errorIconSmall;
    private Texture2D warningIcon;
    private Texture2D warningIconSmall;
    private Texture2D infoIcon;
    private Texture2D infoIconSmall;</code></pre>

<pre class="language-csharp  line-numbers " data-start="47" data-line="60-65"><code>    private void OnEnable()
    {
        errorIcon = EditorGUIUtility.Load(&quot;icons/console.erroricon.png&quot;) as Texture2D;
        warningIcon = EditorGUIUtility.Load(&quot;icons/console.warnicon.png&quot;) as Texture2D;
        infoIcon = EditorGUIUtility.Load(&quot;icons/console.infoicon.png&quot;) as Texture2D;

        errorIconSmall = EditorGUIUtility.Load(&quot;icons/console.erroricon.sml.png&quot;) as Texture2D;
        warningIconSmall = EditorGUIUtility.Load(&quot;icons/console.warnicon.sml.png&quot;) as Texture2D;
        infoIconSmall = EditorGUIUtility.Load(&quot;icons/console.infoicon.sml.png&quot;) as Texture2D;

        resizerStyle = new GUIStyle();
        resizerStyle.normal.background = EditorGUIUtility.Load(&quot;icons/d_AvatarBlendBackground.png&quot;) as Texture2D;

        boxStyle = new GUIStyle();
        boxStyle.normal.textColor = new Color(0.7f, 0.7f, 0.7f);
        
        boxBgOdd = EditorGUIUtility.Load(&quot;builtin skins/darkskin/images/cn entrybackodd.png&quot;) as Texture2D;
        boxBgEven = EditorGUIUtility.Load(&quot;builtin skins/darkskin/images/cnentrybackeven.png&quot;) as Texture2D;
        boxBgSelected = EditorGUIUtility.Load(&quot;builtin skins/darkskin/images/menuitemhover.png&quot;) as Texture2D;
    }</code></pre>

<pre class="language-csharp  line-numbers " data-start="124" data-line="134-162"><code>    private void DrawResizer()
    {
        resizer = new Rect(0, (position.height * sizeRatio) - resizerHeight, position.width, resizerHeight * 2);

        GUILayout.BeginArea(new Rect(resizer.position + (Vector2.up * resizerHeight), new Vector2(position.width, 2)), resizerStyle);
        GUILayout.EndArea();

        EditorGUIUtility.AddCursorRect(resizer, MouseCursor.ResizeVertical);
    }

    private bool DrawBox(string content, BoxType boxType, bool isOdd, bool isSelected)
    {
        if (isSelected)
        {
            boxStyle.normal.background = boxBgSelected;
        }
        else 
        {
            if (isOdd)
            {
                boxStyle.normal.background = boxBgOdd;
            }
            else
            {
                boxStyle.normal.background = boxBgEven;
            }
        }

        switch (boxType)
        {
            case LogType.Error: icon = errorIcon; break;
            case LogType.Exception: icon = errorIcon; break;
            case LogType.Assert: icon = errorIcon; break;
            case LogType.Warning: icon = warningIcon; break;
            case LogType.Log: icon = infoIcon; break;
        }

        return GUILayout.Button(new GUIContent(content, icon), boxStyle, GUILayout.ExpandWidth(true), GUILayout.Height(30));
    }

    private void ProcessEvents(Event e)
    {
        ...</code></pre>

<p>Now we can use <code>DrawBox()</code> method in <code>DrawUpperPanel()</code> to actually display some content:</p>

<pre class="language-csharp  line-numbers " data-start="104" data-line="111-115"><code>    private void DrawUpperPanel()
    {
        upperPanel = new Rect(0, menuBarHeight, position.width, (position.height * sizeRatio) - menuBarHeight);

        GUILayout.BeginArea(upperPanel);
        upperPanelScroll = GUILayout.BeginScrollView(upperPanelScroll);

        DrawBox(&quot;Hello, World!&quot;, LogType.Log, true);
        DrawBox(&quot;ResizablePanels here!&quot;, LogType.Log, false);
        DrawBox(&quot;How do I look?&quot;, LogType.Warning, true);
        DrawBox(&quot;The lower panel doesn&#39;t seem to be working.&quot;, LogType.Error, false);
        DrawBox(&quot;You should start working on that.&quot;, LogType.Warning, true);

        GUILayout.EndScrollView();
        GUILayout.EndArea();
    }</code></pre>

<p>And the result is a scrollable panel with a zebra effect and icons!:</p>

<div class="img-wrapper">
    
        <img src="/assets/img/resizable-panels-working-upper-panel-1.png" class="center" alt="Resizable Panels" width="400px" />
    
    <div class="empty-caption"></div>
</div>

<h3 id="lower-panel">Lower Panel</h3>

<p>Up next is the lower panel. All this panel does is to display a message, so we will just add a scroll view and a text area.</p>

<pre class="language-csharp  line-numbers " data-start="24" data-line="25-29"><code>    private Vector2 upperPanelScroll;
    private Vector2 lowerPanelScroll;

    private GUIStyle resizerStyle;
    private GUIStyle boxStyle;
    private GUIStyle textAreaStyle;</code></pre>

<pre class="language-csharp  line-numbers " data-start="49" data-line="69-71"><code>    private void OnEnable()
    {
        errorIcon = EditorGUIUtility.Load(&quot;icons/console.erroricon.png&quot;) as Texture2D;
        warningIcon = EditorGUIUtility.Load(&quot;icons/console.warnicon.png&quot;) as Texture2D;
        infoIcon = EditorGUIUtility.Load(&quot;icons/console.infoicon.png&quot;) as Texture2D;

        errorIconSmall = EditorGUIUtility.Load(&quot;icons/console.erroricon.sml.png&quot;) as Texture2D;
        warningIconSmall = EditorGUIUtility.Load(&quot;icons/console.warnicon.sml.png&quot;) as Texture2D;
        infoIconSmall = EditorGUIUtility.Load(&quot;icons/console.infoicon.sml.png&quot;) as Texture2D;

        resizerStyle = new GUIStyle();
        resizerStyle.normal.background = EditorGUIUtility.Load(&quot;icons/d_AvatarBlendBackground.png&quot;) as Texture2D;

        boxStyle = new GUIStyle();
        boxStyle.normal.textColor = new Color(0.7f, 0.7f, 0.7f);

        boxBgOdd = EditorGUIUtility.Load(&quot;builtin skins/darkskin/images/cn entrybackodd.png&quot;) as Texture2D;
        boxBgEven = EditorGUIUtility.Load(&quot;builtin skins/darkskin/images/cnentrybackeven.png&quot;) as Texture2D;
        boxBgSelected = EditorGUIUtility.Load(&quot;builtin skins/darkskin/images/menuitemhover.png&quot;) as Texture2D;

        textAreaStyle = new GUIStyle();
        textAreaStyle.normal.textColor = new Color(0.9f, 0.9f, 0.9f);
        textAreaStyle.normal.background = EditorGUIUtility.Load(&quot;builtin skins/darkskin/images/projectbrowsericonareabg.png&quot;) as Texture2D;
    }</code></pre>

<pre class="language-csharp  line-numbers " data-start="127" data-line="132-136"><code>    private void DrawLowerPanel()
    {
        lowerPanel = new Rect(0, (position.height * sizeRatio) + resizerHeight, position.width, (position.height * (1 - sizeRatio)) - resizerHeight);

        GUILayout.BeginArea(lowerPanel);
        lowerPanelScroll = GUILayout.BeginScrollView(lowerPanelScroll);

        GUILayout.TextArea(&quot;It is working now!&quot;, textAreaStyle);

        GUILayout.EndScrollView();
        GUILayout.EndArea();
    }</code></pre>

<p>It looks great!</p>

<div class="img-wrapper">
    
        <img src="/assets/img/resizable-panels-working-lower-panel-1.png" class="center" alt="Resizable Panels" width="400px" />
    
    <div class="empty-caption"></div>
</div>

<h3 id="adding-interaction">Adding Interaction</h3>

<p>Yes, our window looks good, but it doesn’t do anything useful right now. Since this is a console window clone, I would like it to receive log messages from Unity’s own <code>Debug</code> class and display them in a similar manner. A log contains some data, such as a log string, a stack trace and a type, hence we need a class for it. We will be keeping the instances of this class in a list and a reference to the selected log. When we modify the upper and lower panel code, our window will start behaving exactly like the console window.</p>

<pre class="language-csharp  line-numbers " data-start="209" data-line="209-223"><code>public class Log
{
    public bool isSelected;
    public string info;
    public string message;
    public LogType type;

    public Log(bool isSelected, string info, string message, LogType type)
    {
        this.isSelected = isSelected;
        this.info = info;
        this.message = message;
        this.type = type;
    }
}</code></pre>

<pre class="language-csharp  line-numbers " data-line="3"><code>using UnityEngine;
using UnityEditor;
using System.Collections.Generic;</code></pre>

<pre class="language-csharp  line-numbers " data-start="43" data-line="43-44"><code>    private List&lt;Log&gt; logs;
    private Log selectedLog;</code></pre>

<pre class="language-csharp  line-numbers " data-start="53" data-line="77,78"><code>    private void OnEnable()
    {
        errorIcon = EditorGUIUtility.Load(&quot;icons/console.erroricon.png&quot;) as Texture2D;
        warningIcon = EditorGUIUtility.Load(&quot;icons/console.warnicon.png&quot;) as Texture2D;
        infoIcon = EditorGUIUtility.Load(&quot;icons/console.infoicon.png&quot;) as Texture2D;

        errorIconSmall = EditorGUIUtility.Load(&quot;icons/console.erroricon.sml.png&quot;) as Texture2D;
        warningIconSmall = EditorGUIUtility.Load(&quot;icons/console.warnicon.sml.png&quot;) as Texture2D;
        infoIconSmall = EditorGUIUtility.Load(&quot;icons/console.infoicon.sml.png&quot;) as Texture2D;

        resizerStyle = new GUIStyle();
        resizerStyle.normal.background = EditorGUIUtility.Load(&quot;icons/d_AvatarBlendBackground.png&quot;) as Texture2D;

        boxStyle = new GUIStyle();
        boxStyle.normal.textColor = new Color(0.9f, 0.9f, 0.9f);

        boxBgOdd = EditorGUIUtility.Load(&quot;builtin skins/darkskin/images/cn entrybackodd.png&quot;) as Texture2D;
        boxBgEven = EditorGUIUtility.Load(&quot;builtin skins/darkskin/images/cnentrybackeven.png&quot;) as Texture2D;
        boxBgSelected = EditorGUIUtility.Load(&quot;builtin skins/darkskin/images/menuitemhover.png&quot;) as Texture2D;

        textAreaStyle = new GUIStyle();
        textAreaStyle.normal.textColor = new Color(0.9f, 0.9f, 0.9f);
        textAreaStyle.normal.background = EditorGUIUtility.Load(&quot;builtin skins/darkskin/images/projectbrowsericonareabg.png&quot;) as Texture2D;
    
        logs = new List&lt;Log&gt;();
        selectedLog = null;
    }</code></pre>

<pre class="language-csharp  line-numbers " data-start="117" data-line="124-137,150-153"><code>    private void DrawUpperPanel()
    {
        upperPanel = new Rect(0, menuBarHeight, position.width, (position.height * sizeRatio) - menuBarHeight);

        GUILayout.BeginArea(upperPanel);
        upperPanelScroll = GUILayout.BeginScrollView(upperPanelScroll);

        for (int i = 0; i &lt; logs.Count; i++)
        {
            if (DrawBox(logs[i].info, logs[i].type, i % 2 == 0, logs[i].isSelected))
            {
                if (selectedLog != null)
                {
                    selectedLog.isSelected = false;
                }

                logs[i].isSelected = true;
                selectedLog = logs[i];
                GUI.changed = true;
            }
        }

        GUILayout.EndScrollView();
        GUILayout.EndArea();
    }

    private void DrawLowerPanel()
    {
        lowerPanel = new Rect(0, (position.height * sizeRatio) + resizerHeight, position.width, (position.height * (1 - sizeRatio)) - resizerHeight);

        GUILayout.BeginArea(lowerPanel);
        lowerPanelScroll = GUILayout.BeginScrollView(lowerPanelScroll);

        if (selectedLog != null)
        {
            GUILayout.TextArea(selectedLog.message, textAreaStyle);
        }

        GUILayout.EndScrollView();
        GUILayout.EndArea();
    }</code></pre>

<p>In order to receive logs from <code>Debug.Log()</code> calls, we need to tap into Unity’s log message event. Generally, we can’t access parts of Unity API that are restricted to main thread but, fortunately, Unity exposes an application event called <code>logMessageReceived</code>. We are going to subscribe to this event in <code>OnEnable()</code> and in the subscriber method we will create a <code>Log</code> object and add it the list of logs.</p>

<pre class="language-csharp  line-numbers " data-start="53" data-line="80,83-91"><code>    private void OnEnable()
    {
        errorIcon = EditorGUIUtility.Load(&quot;icons/console.erroricon.png&quot;) as Texture2D;
        warningIcon = EditorGUIUtility.Load(&quot;icons/console.warnicon.png&quot;) as Texture2D;
        infoIcon = EditorGUIUtility.Load(&quot;icons/console.infoicon.png&quot;) as Texture2D;

        errorIconSmall = EditorGUIUtility.Load(&quot;icons/console.erroricon.sml.png&quot;) as Texture2D;
        warningIconSmall = EditorGUIUtility.Load(&quot;icons/console.warnicon.sml.png&quot;) as Texture2D;
        infoIconSmall = EditorGUIUtility.Load(&quot;icons/console.infoicon.sml.png&quot;) as Texture2D;

        resizerStyle = new GUIStyle();
        resizerStyle.normal.background = EditorGUIUtility.Load(&quot;icons/d_AvatarBlendBackground.png&quot;) as Texture2D;

        boxStyle = new GUIStyle();
        boxStyle.normal.textColor = new Color(0.9f, 0.9f, 0.9f);

        boxBgOdd = EditorGUIUtility.Load(&quot;builtin skins/darkskin/images/cn entrybackodd.png&quot;) as Texture2D;
        boxBgEven = EditorGUIUtility.Load(&quot;builtin skins/darkskin/images/cnentrybackeven.png&quot;) as Texture2D;
        boxBgSelected = EditorGUIUtility.Load(&quot;builtin skins/darkskin/images/menuitemhover.png&quot;) as Texture2D;

        textAreaStyle = new GUIStyle();
        textAreaStyle.normal.textColor = new Color(0.9f, 0.9f, 0.9f);
        textAreaStyle.normal.background = EditorGUIUtility.Load(&quot;builtin skins/darkskin/images/projectbrowsericonareabg.png&quot;) as Texture2D;
    
        logs = new List&lt;Log&gt;();
        selectedLog = null;

        Application.logMessageReceived += LogMessageReceived;
    }

    private void OnDisable()
    {
        Application.logMessageReceived -= LogMessageReceived;
    }

    private void OnDestroy()
    {
        Application.logMessageReceived -= LogMessageReceived;
    }</code></pre>

<pre class="language-csharp  line-numbers " data-start="239" data-line="239-243"><code>    private void LogMessageReceived(string condition, string stackTrace, LogType type)
    {
        Log l = new Log(false, condition, stackTrace, type);
        logs.Add(l);
    }</code></pre>

<p>Time for the ultimate test: take your <strong>ResizablePanels.cs</strong> code to a working application of yours or just create a new <code>Monobehaviour</code> in your current project. Throw in a couple of <code>Debug.Log()</code>, <code>Debug.LogWarning()</code> and <code>Debug.LogError()</code> calls and see how your window works.</p>

<div class="img-wrapper">
    
        <img src="/assets/img/resizable-panels-working.png" class="center" alt="Resizable Panels" width="400px" />
    
    <div class="empty-caption"></div>
</div>

<h3 id="conclusion">Conclusion</h3>

<p>This concludes our tutorial on creating a clone of the console window. Now we have a window that looks almost exactly like a console, and has similar functionality (implementing the rest of the functionality can be an exercise for the reader :) ). Let’s review what we learned in this post:</p>

<ul>
  <li>Styling GUI elements as a menu bar.</li>
  <li>Laying out GUI elements both vertically and horizontally.</li>
  <li>Creating buttons and toggles.</li>
  <li>Adding texture to GUI elements.</li>
  <li>Creating scroll views.</li>
  <li>Subscribing to Unity’s Debug events.</li>
</ul>

<p>It doesn’t seem like a lot, but believe me, we have covered everything you need to know in order to build your own editor windows. In the next blog post, we will have a look at node-based editors and start creating them for ourselves. And as I promised, <a href="https://github.com/oguzkonya/post--creating-unity-console-window">here</a> is the script in full. Until next time.</p>]]></content><author><name>Oguz Konya</name></author><category term="unity" /><category term="unity-editor" /><summary type="html"><![CDATA[In our last post we created a Unity window and added two resizable panels. In this post, we will improve upon it and make it a clone of Unity’s console window. This post is going to be a little bit longer, so I will omit the previously written code, but the final version will still be available in full at the end.]]></summary></entry><entry><title type="html">Creating Editor Windows in Unity</title><link href="https://oguzkonya.com/creating-editor-windows-in-unity/" rel="alternate" type="text/html" title="Creating Editor Windows in Unity" /><published>2019-08-01T00:00:00+00:00</published><updated>2019-08-01T00:00:00+00:00</updated><id>https://oguzkonya.com/creating-editor-windows-in-unity</id><content type="html" xml:base="https://oguzkonya.com/creating-editor-windows-in-unity/"><![CDATA[<p>For the last decade, Unity has been a great platform for developing games that provides a large number of tools to developers: rendering engine, physics engine, animation systems, audio mixers etc. However, when creating levels or generating in-game data, Unity falls short, because each game is unique and requires different kinds of tools. Thankfully, Unity has an API available to us developers to create our own editor windows, custom drawers and inspector panels. In this series of blog posts, I am going to show you how I develop custom editors in Unity for designers and artists. We will start by creating an editor window, put two panels in it, and then make it resizable. In the <a href="/creating-clone-unitys-console-window/">next</a> post, we will turn that window into a clone of Unity’s own Console window.</p>

<h2 id="creating-an-editor-window">Creating an Editor Window</h2>

<p>Well then, let’s start! First, we are going to create an empty Unity project and add a folder named <strong>Editor</strong> under <strong>Assets</strong>. If you give folders in Unity certain names, it will treat their contents in a special way. <strong>Editor</strong> is one of those names and the scripts in this folder will become a part of Unity’s own editor. So, then, let’s build an editor window script: go into the <strong>Editor</strong> folder you just created, right-click, and select <strong>Create</strong> <strong>-&gt; C# Script</strong>. You can also select <strong>Editor Test C# Script</strong>, but we will change all the content anyway, so it doesn’t actually matter. Name your script <code>ResizablePanels</code> and then open it in your favourite text editor (I prefer Visual Studio on Windows and Rider on Mac).</p>

<p>Since this is going to be an editor window, the class should derive from <code>EditorWindow</code> instead of <code>MonoBehaviour</code>. The <code>EditorWindow</code> class resides in <code>UnityEditor</code> namespace, so we will need to add it as well.</p>

<pre class="language-csharp  line-numbers " data-filename="ResizablePanels.cs"><code>using UnityEngine;
using UnityEditor;

public class ResizablePanels : EditorWindow
{

}</code></pre>

<p>Editor windows require a static method to be initialized. In this method, we are going build the window and (optional) give it a title. <code>GetWindow()</code> is an <code>EditorWindow</code> method which creates the window, if it doesn’t exist, or finds and focuses on it if it does.</p>

<p>However, a static method on its own will not be enough, we also need to add a button, or something like it, to let our users open the window within Unity. Thankfully there is already an attribute called <code>MenuItem</code> which adds a menu item to Unity’s menu bar and runs the method it is applied to. So, the following code will create the most basic editor window you can create in Unity.</p>

<pre class="language-csharp  line-numbers " data-line="6-11"><code>using UnityEngine;
using UnityEditor;

public class ResizablePanels : EditorWindow
{
    [MenuItem(&quot;Window/Resizable Panels&quot;)]
    private static void OpenWindow()
    {
        ResizablePanels window = GetWindow&lt;ResizablePanels&gt;();
        window.titleContent = new GUIContent(&quot;Resizable Panels&quot;);
    }
}</code></pre>

<p>Here is the menu item:</p>

<div class="img-wrapper">
    
        <img src="/assets/img/menu-item.png" class="center" alt="Menu item" width="300px" />
    
    <div class="empty-caption"></div>
</div>

<p>And here is our window that is opened when you click it:</p>

<div class="img-wrapper">
    
        <img src="/assets/img/window.png" class="center" alt="Window" width="300px" />
    
    <div class="empty-caption"></div>
</div>

<p>In order to draw in this window, we will use the <code>OnGUI()</code> method (yes, Unity’s own editor system still uses the old GUI system and it probably won’t change for a long time). But first, we need two rectangles to define our panels. I will also draw these panels in their own methods, so while we are at it, we should add those methods, too.</p>

<pre class="language-csharp  line-numbers " data-line="6,7,16-28"><code>using UnityEngine;
using UnityEditor;

public class ResizablePanels : EditorWindow
{
    private Rect upperPanel;
    private Rect lowerPanel;

    [MenuItem(&quot;Window/Resizable Panels&quot;)]
    private static void OpenWindow()
    {
        ResizablePanels window = GetWindow&lt;ResizablePanels&gt;();
        window.titleContent = new GUIContent(&quot;Resizable Panels&quot;);
    }
    
    private void OnGUI()
    {
        DrawUpperPanel();
        DrawLowerPanel();
    }
    
    private void DrawUpperPanel()
    {
    }
    
    private void DrawLowerPanel()
    {
    }
}</code></pre>

<p>Our editor window is starting to shape up. All we need to do now is to draw the panels and check if they work correctly. <code>GUILayout.BeginArea(Rect rect)</code> would create a rectangle area to draw in and <code>GUILayout.EndArea()</code> marks the end. These areas will define our panels. I am also going to add a label in both areas so that we can see how they look. Let’s fill in <code>DrawUpperPanel()</code> and <code>DrawLowerPanel()</code>:</p>

<pre class="language-csharp  line-numbers " data-line="24-28,33-37"><code>using UnityEngine;
using UnityEditor;

public class ResizablePanels : EditorWindow
{
    private Rect upperPanel;
    private Rect lowerPanel;

    [MenuItem(&quot;Window/Resizable Panels&quot;)]
    private static void OpenWindow()
    {
        ResizablePanels window = GetWindow&lt;ResizablePanels&gt;();
        window.titleContent = new GUIContent(&quot;Resizable Panels&quot;);
    }

    private void OnGUI()
    {
        DrawUpperPanel();
        DrawLowerPanel();
    }

    private void DrawUpperPanel()
    {
        upperPanel = new Rect(0, 0, position.width, position.height * 0.5f);

        GUILayout.BeginArea(upperPanel);
        GUILayout.Label(&quot;Upper Panel&quot;);
        GUILayout.EndArea();
    }

    private void DrawLowerPanel()
    {
        lowerPanel = new Rect(0, position.height * 0.5f, position.width, position.height * 0.5f);

        GUILayout.BeginArea(lowerPanel);
        GUILayout.Label(&quot;Lower Panel&quot;);
        GUILayout.EndArea();
    }
}</code></pre>

<p>Well, they seem to be working:</p>

<div class="img-wrapper">
    
        <img src="/assets/img/window-2.png" class="center" alt="Window" width="300px" />
    
    <div class="empty-caption"></div>
</div>

<p>However, those two panels are set to cover half of the window each, but if we want them to be resizable, they need to have variable heights. So, I am going to add a size ratio variable; this way, when one panel covers a certain amount of the window, the other can cover the remaining part.</p>

<pre class="language-csharp  line-numbers " data-line="9,26,35"><code>using UnityEngine;
using UnityEditor;

public class ResizablePanels : EditorWindow
{
    private Rect upperPanel;
    private Rect lowerPanel;

    private float sizeRatio = 0.5f;

    [MenuItem(&quot;Window/Resizable Panels&quot;)]
    private static void OpenWindow()
    {
        ResizablePanels window = GetWindow&lt;ResizablePanels&gt;();
        window.titleContent = new GUIContent(&quot;Resizable Panels&quot;);
    }

    private void OnGUI()
    {
        DrawUpperPanel();
        DrawLowerPanel();
    }

    private void DrawUpperPanel()
    {
        upperPanel = new Rect(0, 0, position.width, position.height * sizeRatio);

        GUILayout.BeginArea(upperPanel);
        GUILayout.Label(&quot;Upper Panel&quot;);
        GUILayout.EndArea();
    }

    private void DrawLowerPanel()
    {
        lowerPanel = new Rect(0, (position.height * sizeRatio), position.width, position.height * (1 - sizeRatio));

        GUILayout.BeginArea(lowerPanel);
        GUILayout.Label(&quot;Lower Panel&quot;);
        GUILayout.EndArea();
    }
}</code></pre>

<h2 id="resizing-panels">Resizing Panels</h2>

<p>OK, both panels have variable heights… but we still can’t resize them! But don’t worry, we are not too far from the final product. Now we just need another rectangle area, so that when the user clicks down there we can start resizing. I am going to add that area just between the two panels. It is going to be 10 pixels tall, because, well, why not? I like 10.</p>

<p>We also need to show the user that the mouse pointer is in the resizing area. <code>EditorGUIUtility.AddCursorRect(Rect rect, MouseCursor cursor)</code> does that, so we are going to use it in our drawing method.</p>

<p>There is one more thing we need to show the user: where the resizing area begins. This is going to look like magic, but I assure you, it is not: we will use one of Unity’s own icons and stretch it and place it so that it looks like a line between upper and lower panels.</p>

<pre class="language-csharp  line-numbers " data-line="11,13,22-26,32,53-61"><code>using UnityEngine;
using UnityEditor;

public class ResizablePanels : EditorWindow
{
    private Rect upperPanel;
    private Rect lowerPanel;
    private Rect resizer;

    private float sizeRatio = 0.5f;
    private bool isResizing;

    private GUIStyle resizerStyle;

    [MenuItem(&quot;Window/Resizable Panels&quot;)]
    private static void OpenWindow()
    {
        ResizablePanels window = GetWindow&lt;ResizablePanels&gt;();
        window.titleContent = new GUIContent(&quot;Resizable Panels&quot;);
    }

    private void OnEnable()
    {
        resizerStyle = new GUIStyle();
        resizerStyle.normal.background = EditorGUIUtility.Load(&quot;icons/d_AvatarBlendBackground.png&quot;) as Texture2D;
    }

    private void OnGUI()
    {
        DrawUpperPanel();
        DrawLowerPanel();
        DrawResizer();
    }

    private void DrawUpperPanel()
    {
        upperPanel = new Rect(0, 0, position.width, position.height * sizeRatio);

        GUILayout.BeginArea(upperPanel);
        GUILayout.Label(&quot;Upper Panel&quot;);
        GUILayout.EndArea();
    }

    private void DrawLowerPanel()
    {
        lowerPanel = new Rect(0, (position.height * sizeRatio) + 5, position.width, position.height * (1 - sizeRatio) - 5);

        GUILayout.BeginArea(lowerPanel);
        GUILayout.Label(&quot;Lower Panel&quot;);
        GUILayout.EndArea();
    }

    private void DrawResizer()
    {
        resizer = new Rect(0, (position.height * sizeRatio) - 5f, position.width, 10f);

        GUILayout.BeginArea(new Rect(resizer.position + (Vector2.up * 5f), new Vector2(position.width, 2)), resizerStyle);
        GUILayout.EndArea();

        EditorGUIUtility.AddCursorRect(resizer, MouseCursor.ResizeVertical);
    }
}</code></pre>

<p>Almost finished:</p>

<div class="img-wrapper">
    
        <img src="/assets/img/window-3.png" class="center" alt="Window" width="300px" />
    
    <div class="empty-caption"></div>
</div>

<p>And now, we will finalize it by adding the actual interaction. We will process the incoming events and if the event is a <code>mouse down</code> event and it is in the resizing area, we will start resizing.</p>

<pre class="language-csharp  line-numbers " data-line="34,36,67-93"><code>using UnityEngine;
using UnityEditor;

public class ResizablePanels : EditorWindow
{
    private Rect upperPanel;
    private Rect lowerPanel;
    private Rect resizer;

    private float sizeRatio = 0.5f;
    private bool isResizing;

    private GUIStyle resizerStyle;

    [MenuItem(&quot;Window/Resizable Panels&quot;)]
    private static void OpenWindow()
    {
        ResizablePanels window = GetWindow&lt;ResizablePanels&gt;();
        window.titleContent = new GUIContent(&quot;Resizable Panels&quot;);
    }

    private void OnEnable()
    {
        resizerStyle = new GUIStyle();
        resizerStyle.normal.background = EditorGUIUtility.Load(&quot;icons/d_AvatarBlendBackground.png&quot;) as Texture2D;
    }

    private void OnGUI()
    {
        DrawUpperPanel();
        DrawLowerPanel();
        DrawResizer();

        ProcessEvents(Event.current);

        if (GUI.changed) Repaint();
    }

    private void DrawUpperPanel()
    {
        upperPanel = new Rect(0, 0, position.width, position.height * sizeRatio);

        GUILayout.BeginArea(upperPanel);
        GUILayout.Label(&quot;Upper Panel&quot;);
        GUILayout.EndArea();
    }

    private void DrawLowerPanel()
    {
        lowerPanel = new Rect(0, (position.height * sizeRatio) + 5, position.width, position.height * (1 - sizeRatio) - 5);

        GUILayout.BeginArea(lowerPanel);
        GUILayout.Label(&quot;Lower Panel&quot;);
        GUILayout.EndArea();
    }

    private void DrawResizer()
    {
        resizer = new Rect(0, (position.height * sizeRatio) - 5f, position.width, 10f);

        GUILayout.BeginArea(new Rect(resizer.position + (Vector2.up * 5f), new Vector2(position.width, 2)), resizerStyle);
        GUILayout.EndArea();

        EditorGUIUtility.AddCursorRect(resizer, MouseCursor.ResizeVertical);
    }

    private void ProcessEvents(Event e)
    {
        switch (e.type)
        {
            case EventType.MouseDown:
                if (e.button == 0 &amp;&amp; resizer.Contains(e.mousePosition))
                {
                    isResizing = true;
                }
                break;

            case EventType.MouseUp:
                isResizing = false;
                break;
        }

        Resize(e);
    }

    private void Resize(Event e)
    {
        if (isResizing)
        {
            sizeRatio = e.mousePosition.y / position.height;
            Repaint();
        }
    }
}</code></pre>

<p>And here is the finished version:</p>

<div class="img-wrapper">
    
    <a target="_blank" rel="noopener noreferrer" href="/assets/img/resizable-panels.gif">
    
        <img src="/assets/img/resizable-panels.gif" class="center" alt="Window" width="300px" />
    
    </a>
    
    <em>Click on the image to see the window in action</em>
</div>

<p>As you can see, creating an editor window in Unity with resizable panels is fairly easy. In the <a href="/creating-clone-unitys-console-window/">next</a> blog post we will build on this editor window to create a clone of Unity’s console window.</p>

<p>You can find the full source code <a href="https://github.com/oguzkonya/post--creating-editor-windows">here</a>.</p>]]></content><author><name>Oguz Konya</name></author><category term="unity" /><category term="unity-editor" /><summary type="html"><![CDATA[For the last decade, Unity has been a great platform for developing games that provides a large number of tools to developers: rendering engine, physics engine, animation systems, audio mixers etc. However, when creating levels or generating in-game data, Unity falls short, because each game is unique and requires different kinds of tools. Thankfully, Unity has an API available to us developers to create our own editor windows, custom drawers and inspector panels. In this series of blog posts, I am going to show you how I develop custom editors in Unity for designers and artists. We will start by creating an editor window, put two panels in it, and then make it resizable. In the next post, we will turn that window into a clone of Unity’s own Console window.]]></summary></entry></feed>